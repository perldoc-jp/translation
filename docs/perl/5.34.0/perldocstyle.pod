
=encoding utf8

=head1 NAME

=begin original

perldocstyle - A style guide for writing Perl's documentation

=end original

perldocstyle - Perl の文書を書くためのスタイルガイド

(訳注: (TBR)がついている段落は「みんなの自動翻訳＠TexTra」による
機械翻訳です。)

=head1 DESCRIPTION

=begin original

This document is a guide for the authorship and maintenance of the
documentation that ships with Perl. This includes the following:

=end original

この文書は、Perl に同梱されている文書の作成と保守のためのガイドです。
これは次のものからなります:

=over

=item *

=begin original

The several dozen manual sections whose filenames begin with "C<perl>",
such as C<perlobj>, C<perlre>, and C<perlintro>. (And, yes, C<perl>.)

=end original

C<perlobj>, C<perlre>, C<perlintro> など、ファイル名が "C<perl>" で始まる
数十のマニュアルセクション。
(もちろん C<perl> も。)

=item *

=begin original

The documentation for all the modules included with Perl (as listed by
L<C<perlmodlib>|perlmodlib>).

=end original

(L<C<perlmodlib>|perlmodlib> によってリストされている)
Perl に含まれているすべてのモジュールの文書。

=item *

=begin original

The hundreds of individually presented reference sections derived from
the L<C<perlfunc>|perlfunc> file.

=end original

L<C<perlfunc>|perlfunc> ファイルから派生した、個別に表現された
数百の参照セクション。

=back

=begin original

This guide will hereafter refer to user-manual section files as I<man
pages>, per Unix convention.

=end original

このマニュアルでは、Unix の規則に従って、ユーザマニュアルセクションファイルを
I<man pages> と呼びます。

=head2 Purpose of this guide

(このガイドの目的)

=begin original

This style guide aims to establish standards, procedures, and philosophies
applicable to Perl's core documentation.

=end original

このスタイルガイドは、Perl のコア文書に適用できる標準、手順、理念を
確立することを目的としています。

=begin original

Adherence to these standards will help ensure that any one part of
Perl's manual has a tone and style consistent with that of any other. As
with the rest of the Perl project, the language's documentation
collection is an open-source project authored over a long period of time
by many people. Maintaining consistency across such a wide swath of work
presents a challenge; this guide provides a foundation to help mitigate
this difficulty.

=end original

これらの標準に従うことで、Perl のマニュアルのいずれかの部分が他の部分と
一貫したトーンとスタイルを持つことが保証されます。
Perl プロジェクトの他の部分と同様に、言語の文書コレクションは、
多くの人々によって長期間にわたって作成されたオープンソースプロジェクトです。
このような広範囲の作業にわたって一貫性を維持することには課題があります;
このガイドは、この困難を緩和するための基礎を提供します。

=begin original

This will help its readers--especially those new to Perl--to feel
more welcome and engaged with Perl's documentation, and this in turn
will help the Perl project itself grow stronger through having a larger,
more diverse, and more confident population of knowledgeable users.

=end original

これは、この読者 -- 特に Perl に慣れていない読者 -- が、
Perl の文書に対してより歓迎され、関心を持つようになるのに役立ちます;
また、Perl プロジェクト自体が、より多くの、より多様で、より自信に満ちた
知識のあるユーザーを持つことによって、より強くなるのにも役立ちます。

=head2 Intended audience

(想定する読者)

=begin original

Anyone interested in contributing to Perl's core documentation should
familiarize themselves with the standards outlined by this guide.

=end original

Perl のコア文書への貢献に興味がある人は、このガイドで概説されている
標準をよく理解しておく必要があります。

=begin original

Programmers documenting their own work apart from the Perl project
itself may also find this guide worthwhile, especially if they wish
their work to extend the tone and style of Perl's own manual.

=end original

Perl プロジェクト自体とは別に自分の作業を文書化しているプログラマも、
特に自分の作業で Perl 自身のマニュアルのトーンとスタイルを拡張したいと
思っている場合には、このガイドに価値があると感じるでしょう。

=head2 Status of this document

(この文書の状態)

=begin original

This guide was initially drafted in late 2020, drawing from the
documentation style guides of several open-source technologies
contemporary with Perl. This has included Python, Raku, Rust, and the
Linux kernel.

=end original

このガイドは 2020 年後半に最初に作成され、Perl と同時代の
オープンソース技術の文書スタイルガイドを参考にしています。
これには Python, Raku, Rust、Linux カーネルなどが含まれます。

=begin original

The author intends to see this guide used as starting place from
which to launch a review of Perl's reams of extant documentation, with
the expectation that those conducting this review should grow and modify
this guide as needed to account for the requirements and quirks
particular to Perl's programming manual.

=end original

著者は、このガイドを出発点として、Perl の膨大な現存文書のレビューを
開始するつもりです;
このレビューを行う人たちが、Perl のプログラミングマニュアルに特有の
要件や癖を説明するために必要に応じてこのガイドを成長させ、
修正することを期待しています。

=head1 FUNDAMENTALS

(基本)

=head2 Choice of markup: Pod

(マークアップの選択: Pod)

=begin original

All of Perl's core documentation uses Pod ("Plain Old Documentation"), a
simple markup language, to format its source text. Pod is similar in
spirit to other contemporary lightweight markup technologies, such as
Markdown and reStructuredText, and has a decades-long shared history
with Perl itself.

=end original

Perlのコア文書はすべて、ソーステキストをフォーマットするために、単純なマークアップ言語であるPod("Plain Old Documentation")を使用しています。
Podは、MarkdownやreStructuredTextなどの他の現代的な軽量マークアップ技術と精神が似ており、Perl自体と数十年の歴史を共有しています。
(TBR)

=begin original

For a comprehensive reference to Pod syntax, see L<C<perlpod>|perlpod>.
For the sake of reading this guide, familiarity with the Pod syntax for
section headers (C<=head2>, et cetera) and for inline text formatting
(C<CE<lt>like thisE<gt>>) should suffice.

=end original

Pod構文の詳細については、L<C<perlpod>|perlpod>を参照してください。
このガイドを読むためには、セクションヘッダー(C<=head2>など)とインラインテキストフォーマット(C<CE<lt>like thisE<gt>>)のPod構文に精通していれば十分です。
(TBR)

=begin original

Perl programmers also use Pod to document their own scripts, libraries,
and modules. This use of Pod has its own style guide, outlined by
L<C<perlpodstyle>|perlpodstyle>.

=end original

Perlプログラマーは、独自のスクリプト、ライブラリ、モジュールを文書化するためにもPodを使用しています。
このPodの使用には、L<C<perlpodstyle>|perlpodstyle>によって概説されている独自のスタイルガイドがあります。
(TBR)

=head2 Choice of language: American English

(言語の選択: アメリカ英語)

=begin original

Perl's core documentation is written in English, with a preference for
American spelling of words and expression of phrases. That means "color"
over "colour", "math" versus "maths", "the team has decided" and not
"the team have decided", and so on.

=end original

Perlのコア文書は英語で書かれていますが、単語のスペルとフレーズの表現はアメリカ式が優先されます。
これは、「色」よりも「色」、「数学」対「数学」、「チームが決定した」ではなく「チームが決定した」などを意味します。
(TBR)

=begin original

We name one style of English for the sake of consistency across Perl's
documentation, much as a software project might declare a four-space
indentation standard--even when that doesn't affect how well the code
compiles. Both efforts result in an easier read by avoiding jarring,
mid-document changes in format or style.

=end original

Perlの文書全体に一貫性を持たせるために、英語のスタイルを1つ命名していますが、これはソフトウェアプロジェクトが4スペースのインデント標準を宣言しているように(コードのコンパイルに影響しない場合でも)、どちらの取り組みも、文書の途中でフォーマットやスタイルが変更されることを避けることで、読みやすくなります。
(TBR)

=begin original

Contributors to Perl's documentation should note that this rule
describes the ultimate, published output of the project, and does not
prescribe the dialect used within community contributions. The
documentation team enthusiastically welcomes any English-language
contributions, and will actively assist in Americanizing spelling and
style when warranted.

=end original

Perlの文書への寄稿者は、この規則がプロジェクトの最終的に公開された出力を記述したものであり、コミュニティコントリビューションで使用されている方言を規定したものではないことに注意してください。
文書チームは、英語によるコントリビューションを熱烈に歓迎しており、正当な理由がある場合には、スペリングとスタイルのアメリカ化を積極的に支援します。
(TBR)

=head3 Other languages and translations

(その他の言語と翻訳)

=begin original

Community-authored translations of Perl's documentation do exist,
covering a variety of languages. While the Perl project appreciates
these translation efforts and promotes them when applicable, it does not
officially support or maintain any of them.

=end original

Perlの文書には、コミュニティによる翻訳があり、さまざまな言語に対応しています。
Perlプロジェクトでは、これらの翻訳の取り組みを評価し、必要に応じて推進していますが、公式にはサポートも保守もしていません。
(TBR)

=begin original

That said, keeping Perl's documentation clear, simple, and short has a
welcome side effect of aiding any such translation project.

=end original

そうは言っても、Perlの文書を明確で単純で簡潔なものにしておくことは、そのような翻訳プロジェクトを支援するという歓迎すべき副作用をもたらします。
(TBR)

=begin original

(Note that the Chinese, Japanese, and Korean-language README files
included with Perl's source distributions provide an exception to this
choice of language--but these documents fall outside the scope of this
guide.)

=end original

(Perlのソース配布に含まれている中国語、日本語、韓国語のREADMEファイルには、この言語選択の例外が記載されていますが、これらの文書はこのガイドの範囲外です)。
(TBR)

=head2 Choice of encoding: UTF-8

(エンコーディングの選択: UTF-8)

=begin original

Perl's core documentation files are encoded in UTF-8, and can make use
of the full range of characters this encoding allows.

=end original

Perlのコア文書ファイルはUTF-8でエンコードされており、このエンコードが許可する文字の全範囲を利用することができます。
(TBR)

=begin original

As such, every core doc file (or the Pod section of every core module)
should commence with an C<=encoding utf8> declaration.

=end original

そのため、すべてのコア文書ファイル(またはすべてのコアモジュールの
Pod セクション)は、C<=encoding utf8> 宣言で始まる必要があります。

=head2 Choice of underlying style guide: CMOS

(基となるスタイルガイド: CMOS)

=begin original

Perl's documentation uses the L<Chicago Manual of
Style|https://www.chicagomanualofstyle.org> (CMOS), 17th Edition, as
its baseline guide for style and grammar. While the document you are
currently reading endeavors to serve as an adequate stand-alone style guide
for the purposes of documenting Perl, authors should consider CMOS the
fallback authority for any pertinent topics not covered here.

=end original

Perlの文書では、スタイルと文法のベースラインガイドとして
L<Chicago Manual of Style|https://www.chicagomanualofstyle.org>(CMOS),
17 th Editionを使用しています。
現在読んでいる文書は、Perlを文書化するための適切なスタンドアロン
スタイルガイドとして機能しようとしていますが、ここで取り上げていない
関連トピックについては、CMOS をフォールバック権限として考慮する必要があります。
(TBR)

=begin original

Because CMOS is not a free resource, access to it is not a prerequisite
for contributing to Perl's documentation; the doc team will help
contributors learn about and apply its guidelines as needed. However, we
do encourage anyone interested in significant doc contributions to
obtain or at least read through CMOS. (Copies are likely available
through most public libraries, and CMOS-derived fundamentals can be
found online as well.)

=end original

CMOS は無料のリソースではないため、CMOS へのアクセスは Perl の文書に
貢献するための前提条件ではありません。
文書チームは、貢献者が CMOS のガイドラインを学び、必要に応じて
適用するのを支援します。
しかし、重要な文書への貢献に関心のある人には、CMOS を入手するか、
少なくとも CMOS を通じて読むことをお勧めします
(コピーはほとんどの公共図書館を通じて入手できる可能性が高く、
CMOS 由来の基礎はオンラインでも見つけることができます)。
(TBR)

=head2 Contributing to Perl's documentation

(Perl の文書への貢献)

=begin original

Perl, like any programming language, is only as good as its
documentation. Perl depends upon clear, friendly, and thorough
documentation in order to welcome brand-new users, teach and explain the
language's various concepts and components, and serve as a lifelong
reference for experienced Perl programmers. As such, the Perl project
welcomes and values all community efforts to improve the language's
documentation.

=end original

Perlは、他のプログラミング言語と同じように、その文書と同程度にしか
優れていません。
Perl は、新規ユーザーを歓迎し、Perl のさまざまな概念とコンポーネントを
教えて説明し、経験豊富な Perl プログラマーの生涯にわたる参考資料として
使用するために、明確で親しみやすく、徹底した文書に依存しています。
Perlプロジェクトは、Perlの文書を改善するためのコミュニティのあらゆる
努力を歓迎し、評価しています。
(TBR)

=begin original

Perl accepts documentation contributions through the same open-source
project pipeline as code contributions. See L<C<perlhack>|perlhack> for
more information.

=end original

Perl は、コードコントリビューションと同じ
オープンソースプロジェクトパイプラインを通じて
ドキュメントコントリビューションを受け入れています。
詳細については、L<C<perlhack>|perlhack>を参照してください。
(TBR)

=head1 FORMATTING AND STRUCTURE

(形式と構造)

=begin original

This section details specific Pod syntax and style that all core Perl
documentation should adhere to, in the interest of consistency and
readability.

=end original

このセクションでは、一貫性と読みやすさのために、すべてのコア Per l文書が
従うべき特定のPod構文とスタイルについて詳しく説明します。
(TBR)

=head2 Document structure

(文書構造)

=begin original

Each individual work of core Perl documentation, whether contained
within a C<.pod> file or in the Pod section of a standard code module,
patterns its structure after a number of long-time Unix man page
conventions. (Hence this guide's use of "man page" to refer to any one
self-contained part of Perl's documentation.)

=end original

コアとなるPerl文書の個々の作業は、C<.pod>ファイルに含まれていても
標準コードモジュールのPodセクションに含まれていても、
その構造は長年のUnixのmanページ規則に従ってパターン化されています
(したがって、このガイドでは、Perl文書の独立した部分を指すために
「manページ」を使用しています)。
(TBR)

=begin original

Adhering to these conventions helps Pod formatters present a Perl man
page's content in different contexts--whether a terminal, the web, or
even print. Many of the following requirements originate with
L<C<perlpodstyle>|perlpodstyle>, which derives its recommendations in
turn from these well-established practices.

=end original

これらの規則に従うことで、PodフォーマッタはPerl manページの
コンテンツをさまざまなコンテキスト(ターミナル、Web、さらには
印刷物など)で表示することができます。
以下の要件の多くはL<C<perlpodstyle>|perlpodstyle>に由来しており、
これらの確立されたプラクティスに基づいて推奨事項を導き出しています。
(TBR)

=head3 Name

(名前)

=begin original

After its L<C<=encoding utf8> declaration|/Choice of encoding: UTF-8>, a
Perl man page I<must> present a level-one header named "NAME" (literally),
followed by a paragraph containing the page's name and a very brief
description.

=end original

L<C<=encoding utf8>宣言|/Choice of encoding: UTF-8>の後に、
Perl manページI<must>は"NAME"(文字通り)というレベル1ヘッダーを提示し、
その後にページの名前と非常に簡単な説明を含む段落が続きます。
(TBR)

=begin original

The first few lines of a notional page named C<perlpodexample>:

=end original

C<perlpodexample> という名前の架空のページの最初の数行は:
(TBR)

    =encoding utf8

    =head1 NAME

    perlpodexample - An example of formatting a manual page's title line

=head3 Description and synopsis

(説明と概要)

=begin original

Most Perl man pages also contain a DESCRIPTION section featuring a
summary of, or introduction to, the document's content and purpose.

=end original

ほとんどの Perl の man ページには、DESCRIPTION セクションがあり、
その文書の内容と目的の概要や紹介が書かれています。
(TBR)

=begin original

This section should also, one way or another, clearly identify the
audience that the page addresses, especially if it has expectations
about the reader's prior knowledge. For example, a man page that dives
deep into the inner workings of Perl's regular expression engine should
state its assumptions up front--and quickly redirect readers who are
instead looking for a more basic reference or tutorial.

=end original

また、このセクションでは、何らかの方法で、ページが対象とする読者を明確に特定する必要があります。
特に、読者の事前知識に期待がある場合にはそうすべきです。
例えば、Perlの正規表現エンジンの内部動作を深く掘り下げたmanページでは、前提条件を前もって述べ、より基本的なリファレンスやチュートリアルを探している読者をすぐにリダイレクトする必要があります。
(TBR)

=begin original

Reference pages, when appropriate, can precede the DESCRIPTION with a
SYNOPSIS section that lists, within one or more code blocks, some very
brief examples of the referenced feature's use. This section should show
a handful of common-case and best-practice examples, rather than an
exhaustive list of every obscure method or alternate syntax available.

=end original

参照ページは、必要に応じて、DESCRIPTIONの前にSYNOPSISセクションを付けることができます。
このセクションでは、1つまたは複数のコードブロック内で、参照される機能の使用に関する非常に簡単な例を一覧表示します。
このセクションでは、使用可能なすべてのあいまいなメソッドや代替構文を網羅したリストではなく、いくつかの一般的な例とベストプラクティスの例を示す必要があります。
(TBR)

=head3 Other sections and subsections

(その他の節と副節)

=begin original

Pages should conclude, when appropriate, with a SEE ALSO section
containing hyperlinks to relevant sections of Perl's manual, other Unix
man pages, or appropriate web pages. Hyperlink each such cross-reference via
C<LE<lt>...E<gt>>.

=end original

ページは、必要に応じて、Perlのマニュアル、他のUnixのmanページ、または適切なWebページの関連セクションへのハイパーリンクを含むSEE ALSOセクションで締めくくられるべきです。
C<LE<lt>.E<gt>>を経由してこのような相互参照をハイパーリンクしてください。
(TBR)

=begin original

What other sections to include depends entirely upon the topic at hand.
Authors should feel free to include further C<=head1>-level sections,
whether other standard ones listed by C<perlpodstyle>, or ones specific
to the page's topic; in either case, render these top-level headings in
all-capital letters.

=end original

他にどのようなセクションを含めるかは、そのトピックに完全に依存します。
著者は、C<=head1>レベルのセクションを、C<perlpodstyle>によってリストされた他の標準的なセクションであっても、ページのトピックに固有のセクションであっても、自由に追加する必要があります。
いずれの場合も、これらのトップレベルの見出しはすべて大文字で表示してください。
(TBR)

=begin original

You may then include as many subsections beneath them as needed to meet
the standards of clarity, accessibility, and cross-reference affinity
L<suggested elsewhere in this guide|/Apply one of the four documentation
modes>.

=end original

次に、明確さ、アクセシビリティ、相互参照の類似性の基準を満たすために必要な数のサブセクションをその下に含めることができます。
L<このガイドの他の場所で提案されています|/Apply one of the four documentation
modes>。
(TBR)

=head3 Author and copyright

(著者と著作権)

=begin original

In most circumstances, Perl's stand-alone man pages--those contained
within C<.pod> files--do not need to include any copyright or license
information about themselves. Their source Pod files are part of Perl's
own core software repository, and that already covers them under the
same copyright and license terms as Perl itself. You do not need to
include additional "LICENSE" or "COPYRIGHT" sections of your own.

=end original

ほとんどの場合、Perlのスタンドアロンマニュアルページ(C<.pod>ファイルに含まれているマニュアルページ)には、それ自体に関する著作権情報やライセンス情報を含める必要はありません。
PerlのソースPodファイルはPerl自身のコアソフトウェアリポジトリーの一部であり、Perl自体と同じ著作権とライセンス条件のもとですでにカバーされています。
独自の"LICENSE"や"COPYRIGHT"セクションを追加する必要はありません。
(TBR)

=begin original

These man pages may optionally credit their primary author, or include a
list of significant contributors, under "AUTHOR" or "CONTRIBUTORS"
headings. Note that the presence of authors' names does not preclude a
given page from L<writing in a voice consistent with the rest of Perl's
documentation|/The documentation speaks with one voice>.

=end original

これらのmanページは、"AUTHOR"または"CONTRIBUTORS"という見出しの下に、その主著者をクレジットしたり、重要な貢献者のリストを含んだりすることができます。
著者の名前があるからといって、そのページが
L<writing in a voice consistent with the rest of Perl's
documentation|/The documentation speaks with one voice>。
(TBR)

=begin original

Note that these guidelines do not apply to the core software modules
that ship with Perl. These have their own standards for authorship and
copyright statements, as found in C<perlpodstyle>.

=end original

これらのガイドラインは、Perlに同梱されているコアソフトウェアモジュールには適用されないことに注意してください。
これらのモジュールには、C<perlpodstyle>にあるように、著者やコピーライトに関する独自の基準があります。
(TBR)

=head2 Formatting rules

(形式の規則)

=head3 Line length and line wrap

(行の長さと折りたたみ)

=begin original

Each line within a Perl man page's Pod source file should measure 72
characters or fewer in length.

=end original

Perl man ページの Pod ソースファイル内の各行の長さは、
72 文字以下でなければなりません。

=begin original

Please break paragraphs up into blocks of short lines, rather than
"soft wrapping" paragraphs across hundreds of characters with no line
breaks.

=end original

改行なしで何百文字にもわたって段落を「ソフトラッピング」するのではなく、
段落を短い行のブロックに分割してください。

=head3 Code blocks

(コードブロック)

=begin original

Just like the text around them, all code examples should be as short and
readable as possible, displaying no more complexity than absolutely
necessary to illustrate the concept at hand.

=end original

すべてのコード例は、周囲のテキストと同じように、できるだけ短くて読みやすいものでなければならず、手元の概念を説明するために絶対に必要な以上の複雑さを示す必要はありません。
(TBR)

=begin original

For the sake of consistency within and across Perl's man pages, all
examples must adhere to the code-layout principles set out by
L<C<perlstyle>|perlstyle>.

=end original

Perlのmanページ内およびmanページ間で一貫性を保つために、すべての例はL<C<perlstyle>|perlstyle>によって規定されたコードレイアウト原則に従わなければなりません。
(TBR)

=begin original

Sample code should deviate from these standards only when necessary:
during a demonstration of how Perl disregards whitespace, for example,
or to temporarily switch to two-column indentation for an unavoidably
verbose illustration.

=end original

サンプルコードは、必要な場合にのみこれらの標準から逸脱すべきです。
例えば、Perlがどのように空白文字を無視するかを示すデモを行っているときや、避けられない冗長な説明のために一時的に2列のインデントに切り替えるときなどです。
(TBR)

=begin original

You may include comments within example code to further clarify or label
the code's behavior in-line. You may also use comments as placeholder
for code normally present but not relevant to the current topic, like
so:

=end original

サンプルコード内にコメントを含めて、インラインでのコードの動作をさらに明確にしたり、ラベル付けしたりすることができます。
次のように、通常は存在するが現在のトピックとは関係のないコードのプレースホルダとしてコメントを使用することもできます。
(TBR)

    while (my $line = <$fh>) {
        #
        # (Do something interesting with $line here.)
        #
    }

=begin original

Even the simplest code blocks often require the use of example
variables and subroutines, L<whose names you should choose with
care|/Use meaningful variable and symbol names in examples>.

=end original

最も単純なコードブロックであっても、多くの場合、変数とサブルーチンの例を使用する必要があります。
L<その名前は注意して選択してください|/Use meaningful variable and symbol names in examples>。
(TBR)

=head3 Inline code and literals

(インラインコードとリテラル)

=begin original

Within a paragraph of text, use C<CE<lt>...E<gt>> when quoting or
referring to any bit of Perl code--even if it is only one character
long.

=end original

テキストの段落内で、Perlコードを引用したり参照したりする場合は、C<CE<lt>.E<gt>>を使用します。
これは、1文字の長さであっても同じです。
(TBR)

=begin original

For instance, when referring within an explanatory paragraph to Perl's
operator for adding two numbers together, you'd write "C<CE<lt>+E<gt>>".

=end original

例えば、説明段落で2つの数字を加算するPerlの演算子を参照する場合は、「C<CE<lt>+E<gt>>」と記述します。
(TBR)

=head3 Function names

(関数名)

=begin original

Use C<CE<lt>...E<gt>> to render all Perl function names in monospace,
whenever they appear in text.

=end original

C<CE<lt>.E<gt>>を使用すると、すべてのPerl関数名がテキストに表示されている場合は常に、モノスペースで表示されます。
(TBR)

=begin original

Unless you need to specifically quote a function call with a list of
arguments, do not follow a function's name in text with a pair of empty
parentheses. That is, when referring in general to Perl's C<print>
function, write it as "C<print>", not "C<print()>".

=end original

引数のリストを使用して関数呼び出しを明示的に引用する必要がない限り、テキスト内の関数名の後に空のかっこを付けないでください。
つまり、一般的にPerlのC<print>関数を参照する場合は、"C<print()>"ではなく"C<print>"と記述してください。
(TBR)

=head3 Function arguments

(関数の引数)

=begin original

Represent functions' expected arguments in all-caps, with no sigils, and
using C<CE<lt>...E<gt>> to render them in monospace. These arguments
should have short names making their nature and purpose clear.
Convention specifies a few ones commonly seen throughout Perl's
documentation:

=end original

関数の期待される引数を、記号なしで、C<CE<lt>.E<gt>>を使用してモノスペースで表現します。
これらの引数には、その性質と目的を明確にした短い名前を付ける必要があります。
規約では、Perlの文書で一般的に見られる引数をいくつか指定しています。
(TBR)

=over

=item *

EXPR

=begin original

The "generic" argument: any scalar value, or a Perl expression that
evaluates to one.

=end original

「一般的な」引数: 任意のスカラ値、または 1 と評価される Perl 式。

=item *

ARRAY

=begin original

An array, stored in a named variable.

=end original

名前付き変数に格納された配列。

=item *

HASH

=begin original

A hash, stored in a named variable.

=end original

名前付き変数に格納されたハッシュ。

=item *

BLOCK

=begin original

A curly-braced code block, or a subroutine reference.

=end original

中かっこ付きのコードブロック、またはサブルーチンリファレンス。

=item *

LIST

=begin original

Any number of values, stored across any number of variables or
expressions, which the function will "flatten" and treat as a single
list. (And because it can contain any number of variables, it must be
the I<last> argument, when present.)

=end original

任意の数の変数または式に格納された任意の数の値。
関数はこれらを「フラット化」し、1つのリストとして処理します。
(任意の数の変数を含むことができるため、存在する場合は
I<最後の> 引数である必要があります。)

=back

=begin original

When possible, give scalar arguments names that suggest their purpose
among the arguments. See, for example, L<C<substr>'s
documentation|perlfunc/substr>, whose
listed arguments include C<EXPR>, C<OFFSET>, C<LENGTH>, and C<REPLACEMENT>.

=end original

可能な場合は、引数の中で目的を示すスカラー引数の名前を指定します。
たとえば、L<C<substr>の文書|perlfunc/substr>を参照してください。
リストされている引数には、C<EXPR>、C<OFFSET>、C<LENGTH>、C<REPLACEMENT>があります。
(TBR)

=head3 Apostrophes, quotes, and dashes

(アポストロフィ、クォート、ダッシュ)

=begin original

In Pod source, use straight quotes, and not "curly quotes":  "Like
 this", not “like this”. The same goes for apostrophes:  Here's a
 positive example, and here’s a negative one.

=end original

Pod のソースでは、まっすぐなクォート (straight quotes) を使い、
「曲がったクォート」(curly quotes) は使いません:
“like this” ではなく "Like this" です。
同じ事はアポストロフィにも言えます:
"Here's" は正しい例で、"here’s" は間違った例です。

=begin original

Render em dashes as two hyphens--like this:

=end original

次のように、エムダッシュを2つのハイフンとして表現します:

    Render em dashes as two hyphens--like this.

=begin original

Leave it up to formatters to reformat and reshape these punctuation
marks as best fits their respective target media.

=end original

これらの句読点をそれぞれのターゲットメディアに最も適合するように
再フォーマットし、再形成するのはフォーマッタに任せます。

=head3 Unix programs and C functions

(Unix プログラムと C 関数)

=begin original

When referring to a Unix program or C function with its own man page
(outside of Perl's documentation), include its manual section number in
parentheses. For example: C<malloc(3)>, or C<mkdir(1)>.

=end original

(Perlの文書以外で)独自のmanページを持つUnixプログラムやC関数を参照する場合は、そのマニュアルセクション番号をかっこで囲みます。
例:C<malloc(3)>やC<mkdir(1)>。
(TBR)

=begin original

If mentioning this program for the first time within a man page or
section, make it a cross reference, e.g. C<LE<lt>malloc(3)E<gt>>.

=end original

このプログラムをmanページまたはセクション内で初めて言及する場合は、相互参照にしてください。
例:C<LE<lt>malloc(3)E<gt>>。
(TBR)

=begin original

Do not otherwise style this text.

=end original

このテキストにスタイルを設定しないでください。
(TBR)

=head3 Cross-references and hyperlinks

(クロスリファレンスとハイパーリンク)

=begin original

Make generous use of Pod's C<LE<lt>...E<gt>> syntax to create hyperlinks
to other parts of the current man page, or to other documents entirely
-- whether elsewhere on the reader's computer, or somewhere on the
internet, via URL.

=end original

PodのC<LE<lt>.E<gt>>構文を利用して、現在のmanページの他の部分へのハイパーリンクや、他の文書全体へのハイパーリンクを作成します--読者のコンピュータ上のどこかで、あるいはインターネット上のどこかで、URL経由で作成します。
(TBR)

=begin original

Use C<LE<lt>...E<gt>> to link to another section of the current man page
when mentioning it, and make use of its page-and-section syntax to link to
the most specific section of a separate page within Perl's
documentation. Generally, the first time you refer to a specific
function, program, or concept within a certain page or section, consider
linking to its full documentation.

=end original

C<LE<lt>.E<gt>>を使用して、現在のmanページの別のセクションにリンクします。
また、そのページとセクションの構文を使用して、Perlの文書内の別のページの最も詳細なセクションにリンクします。
一般に、特定のページまたはセクション内で特定の機能、プログラム、または概念を初めて参照する場合は、その完全な文書へのリンクを検討してください。
(TBR)

=begin original

Hyperlinks do not supersede other formatting required by this guide; Pod
allows nested text formats, and you should use this feature as needed.

=end original

ハイパーリンクは、このガイドで必要とされる他のフォーマットに優先するものではありません。
Podでは、ネストされたテキストフォーマットを使用できます。
必要に応じてこの機能を使用してください。
(TBR)

=begin original

Here is an example sentence that mentions Perl's C<say> function, with a
link to its documentation section within the C<perlfunc> man page:

=end original

以下に、PerlのC<say>関数に言及した例文と、C<perlfunc>manページの文書セクションへのリンクを示します。
(TBR)

    In version 5.10, Perl added support for the 
    L<C<say>|perlfunc/say FILEHANDLE LIST> function.

=begin original

Note the use of the vertical pipe ("C<|>") to separate how the link will
appear to readers ("C<CE<lt>sayE<gt>>") from the full page-and-section specifier
that the formatter links to.

=end original

フォーマッタがリンクする完全なページとセクションの指定子から、
読み手に対してリンクがどのように見えるか ("C<CE<lt>sayE<gt>>") を
分離するために、垂直パイプ ("C<|>") を使うことに注意してください。

=head3 Tables and diagrams

(表と図)

=begin original

Pod does not officially support tables. To best present tabular data,
include the table as both HTML and plain-text representations--the
latter as an indented code block. Use C<=begin> / C<=end> directives to
target these tables at C<html> and C<text> Pod formatters, respectively.
For example:

=end original

Podは公式には表をサポートしていません。
表形式のデータを最適に表示するには、表をHTMLとプレーンテキストの両方の表現(後者はインデントされたコードブロック)として含めます。
C<=begin>/C<=end>ディレクティブを使用して、これらの表をそれぞれC<html>とC<text>Podフォーマッタでターゲットにします。
次に例を示します。
(TBR)

    =head2 Table of fruits

    =begin text

     Name           Shape           Color
     =====================================
     Apple          Round           Red
     Banana         Long            Yellow
     Pear           Pear-shaped     Green

    =end text

    =begin html

    <table>
    <tr><th>Name</th><th>Shape</th><th>Color</th></tr>
    <tr><td>Apple</td><td>Round</td><td>Red</td></tr>
    <tr><td>Banana</td><td>Long</td><td>Yellow</td></tr>
    <tr><td>Pear</td><td>Pear-shaped</td><td>Green</td></tr>
    </table>

    =end html

=begin original

The same holds true for figures and graphical illustrations. Pod does
not natively support inline graphics, but you can mix HTML C<<< <img> >>> tags
with monospaced text-art representations of those images' content.

=end original

図や図解についても同様である。
Podはもともとインライングラフィックをサポートしていないが、HTMLのC<<<<img>>>>タグを、それらの画像の内容をモノスペースで表現したテキストアートと組み合わせることができる。
(TBR)

=begin original

Due in part to these limitations, most Perl man pages use neither tables
nor diagrams. Like any other tool in your documentation toolkit,
however, you may consider their inclusion when they would improve an
explanation's clarity without adding to its complexity.

=end original

これらの制限のために、ほとんどのPerlのマニュアルページでは表も図も使用していません。
ただし、文書ツールキットの他のツールと同様に、説明の複雑さを増すことなく説明の明確さを向上させる場合には、説明を含めることを検討してください。
(TBR)

=head2 Adding comments

(コメントの追加)

=begin original

Like any other kind of source code, Pod lets you insert comments visible
only to other people reading the source directly, and ignored by the
formatting programs that transform Pod into various human-friendly
output formats (such as HTML or PDF). 

=end original

他の種類のソースコードと同様に、Podでは、ソースを直接読んでいる他の人にしか見えないコメントを挿入することができ、Podをさまざまな人に使いやすい出力フォーマット(HTMLやPDFなど)に変換するフォーマットプログラムでは無視される。
(TBR)

=begin original

To comment Pod text, use the C<=for> and C<=begin> / C<=end> Pod
directives, aiming them at a (notional) formatter called "C<comment>". A
couple of examples:

=end original

Podテキストにコメントを付けるには、C<=for>およびC<=begin>/C<=end>Podディレクティブを使用して、"C<comment>"と呼ばれる(概念的な)フォーマッタをターゲットにします。
次に例を示します。
(TBR)

    =for comment Using "=for comment" like this is good for short,
    single-paragraph comments.

    =begin comment

    If you need to comment out more than one paragraph, use a
    =begin/=end block, like this.

    None of the text or markup in this whole example would be visible to
    someone reading the documentation through normal means, so it's
    great for leaving notes, explanations, or suggestions for your
    fellow documentation writers.

    =end comment

=begin original

In the tradition of any good open-source project, you should make free
but judicious use of comments to leave in-line "meta-documentation" as
needed for other Perl documentation writers (including your future
self).

=end original

優れたオープンソースプロジェクトの伝統では、コメントを自由に、しかし賢明に使用して、他のPerl文書作成者(将来の自分自身を含む)に必要なインライン「メタ文書」を残すようにすべきです。
(TBR)

=head2 Perlfunc has special rules

(perlfunc は特別な規則があります)

=begin original

The L<C<perlfunc> man page|perlfunc>, an exhaustive reference of every
Perl built-in function, has a handful of formatting rules not seen
elsewhere in Perl's documentation.

=end original

すべての Perl 組み込み関数の網羅的な参考資料である
L<C<perlfunc> man ページ|perlfunc> には、他の Perl の文書にはない
フォーマットルールがいくつかあります。

=begin original

Software used during Perl's build process
(L<Pod::Functions|Pod::Functions>) parses this page according to certain
rules, in order to build separate man pages for each of Perl's
functions, as well as achieve other indexing effects. As such,
contributors to perlfunc must know about and adhere to its particular
rules.

=end original

Perlの構築プロセス(L<Pod::Functions|Pod::Functions>)で使用されるソフトウェアは、特定のルールに従ってこのページを解析します。
これは、Perlの各関数に対して個別のmanページを構築したり、その他のインデックス効果を実現したりするためです。
そのため、perlfuncへのコントリビュータは、その特定のルールについて理解し、それに従う必要があります。
(TBR)

=begin original

Most of the perfunc man page comprises a single list, found under the
header L<"Alphabetical Listing of Perl Functions"|perlfunc/Alphabetical
Listing of Perl Functions>. Each function reference is an entry on that
list, made of three parts, in order:

=end original

perfunc manページのほとんどは、ヘッダーL<"Alphabetical Listing of Perl Functions"|perlfunc/Alphabetical Listing of Perl Functions>の下にある単一のリストで構成されています。
各関数参照は、このリストのエントリであり、次の順序で3つの部分から構成されています。
(TBR)

=over

=item 1.

=begin original

A list of C<=item> lines which each demonstrate, in template format, a
way to call this function. One line should exist for every combination
of arguments that the function accepts (including no arguments at all,
if applicable).

=end original

C<=item>行のリスト示すC<=item>行のリスト。
関数が受け入れる引数の組み合わせごとに1行が必要です(引数が存在しない場合は、引数はありません)。
(TBR)

=begin original

If modern best practices prefer certain ways to invoke the function
over others, then those ways should lead the list.

=end original

もし現代のベストプラクティスが、関数を呼び出すために他の方法よりも特定の方法を好むなら、それらの方法がリストの先頭に来るべきです。
(TBR)

=begin original

The first item of the list should be immediately followed by one or
more C<XE<lt>...E<gt>> terms listing index-worthy topics; if nothing
else, then the name of the function, with no arguments.

=end original

リストの最初の項目の直後に、インデックスに値するトピックをリストした1つ以上のC<XE<lt>.E<gt>>項が続きます。
それ以外の場合は、引数のない関数の名前です。
(TBR)

=item 2.

=begin original

A C<=for> line, directed at C<Pod::Functions>, containing a one-line
description of what the function does. This is written as a phrase, led
with an imperative verb, with neither leading capitalization nor ending
punctuation. Examples include "quote a list of words" and "change a
filename".

=end original

C<Pod::Functions>に向けられたC<=for>行。
この行には、関数の動作に関する1行の説明が含まれています。
これは、命令動詞で始まるフレーズとして記述され、先頭の大文字と小文字も末尾の句読点もありません。
たとえば、"quote a list of words"や"change a filename"などです。
(TBR)

=item 3.

=begin original

The function's definition and reference material, including all
explanatory text and code examples.

=end original

関数の定義と参照資料(すべての説明テキストとコード例を含む)。
(TBR)

=back

=begin original

Complex functions that need their text divided into subsections (under
the principles of L<"Apply section-breaks and examples
generously"|/Apply section-breaks and examples generously>) may do so by
using sublists, with C<=item> elements as header text.

=end original

(L<"Apply section-breaks and examples
generously"|/Apply section-breaks and examples generously>の原則の下)は、C<=item>要素をヘッダテキストとして持つサブリストを使用することでそれを行うことができます。
(TBR)

=begin original

A fictional function "C<myfunc>", which takes a list as an optional
argument, might have an entry in perlfunc shaped like this:

=end original

オプションの引数としてリストを取る架空の関数"C<myfunc>"は、perlfuncに次のようなエントリを持つ可能性があります。
(TBR)

    =item myfunc LIST
    X<myfunc>

    =item myfunc

    =for Pod::Functions demonstrate a function's perlfunc section 

    [ Main part of function definition goes here, with examples ]

    =over

    =item Legacy uses

    [ Examples of deprecated syntax still worth documenting ]

    =item Security considerations

    [ And so on... ]

    =back

=head1 TONE AND STYLE

(論調とスタイル)

=head2 Apply one of the four documentation modes

(四つの文書モードの一つを適用する)

=begin original

Aside from "meta" documentation such as C<perlhist> or C<perlartistic>,
each of Perl's man pages should conform to one of the four documentation
"modes" suggested by L<I<The Documentation System> by Daniele
Procida|https://documentation.divio.com>. These include tutorials,
cookbooks, explainers, and references--terms that we define in further
detail below.

=end original

C<perlhist> や C<perlartistic> のような「メタ」文書を除いて、
Perlの各manページは、
L<Daniele Procida の I<The Documentation System>|https://documentation.divio.com>
が提案する四つの文書「モード」の一つに従うべきです。
これには、チュートリアル、クックブック、解説、リファレンスがあります --
これらの用語については、後で詳しく説明します。

=begin original

Each mode of documentation speaks to a different audience--not just
people of different backgrounds and skill levels, but individual readers
whose needs from language documentation can shift depending upon
context. For example, a programmer with plenty of time to learn a new
concept about Perl can ease into a tutorial about it, and later expand
their knowledge further by studying an explainer. Later, that same
programmer, wading knee-deep in live code and needing only to look up
some function's exact syntax, will want to reach for a reference page
instead.

=end original

文書の各モードは、異なる読者を対象としています。
異なるバックグラウンドやスキルレベルの人々だけでなく、言語文書からのニーズが状況に応じて変化する可能性のある個々の読者も対象としています。
例えば、Perlに関する新しい概念を学ぶ時間が十分にあるプログラマーは、Perlに関するチュートリアルに進んで、後で解説者を研究することによって知識をさらに広げることができます。
その後、その同じプログラマーが、生のコードに深く入り込み、関数の正確な構文を調べるだけで、代わりにリファレンスページを探したいと思うようになるでしょう。
(TBR)

=begin original

Perl's documentation must strive to meet these different situational
expectations by limiting each man page to a single mode. This helps
writers ensure they provide readers with the documentation needed or
expected, despite ever-evolving situations.

=end original

Perlの文書は、各manページを単一モードに制限することによって、これらの異なる状況の期待に応えるように努力する必要があります。
これにより、ライターは、絶えず変化する状況にもかかわらず、必要な、あるいは期待される文書を確実に読者に提供できるようになります。
(TBR)

=head3 Tutorial

(チュートリアル)

=begin original

A tutorial man page focuses on B<learning>, ideally by I<doing>. It
presents the reader with small, interesting examples that allow them to
follow along themselves using their own Perl interpreter. The tutorial
inspires comprehension by letting its readers immediately experience
(and experiment on) the concept in question. Examples include
C<perlxstut>, C<perlpacktut>, and
C<perlretut>.

=end original

チュートリアルmanページでは、B<learning>、理想的にはI<doing>に焦点を当てています。
このチュートリアルでは、読者が独自のPerlインタプリタを使用して自分自身をフォローできるようにする、小さくて興味深い例を紹介しています。
このチュートリアルでは、読者が問題の概念をすぐに体験(および実験)できるようにすることで、理解を促しています。
例としては、C<perlxstut>、C<perlpacktut>、C<perlretut>などがあります。
(TBR)

=begin original

Tutorial man pages must strive for a welcoming and reassuring tone from
their outset; they may very well be the first things that a newcomer to
Perl reads, playing a significant role in whether they choose
to stick around. Even an experienced programmer can benefit from the
sense of courage imparted by a strong tutorial about a more advanced
topic. After completing a tutorial, a reader should feel like they've
been led from zero knowledge of its topic to having an invigorating
spark of basic understanding, excited to learn more and experiment
further.

=end original

チュートリアルのマニュアルページは、最初から歓迎と安心感を与えるように努力する必要があります。
これは、Perlの初心者が読む最初のページであり、彼らが存続するかどうかに重要な役割を果たしている可能性があります。
経験豊富なプログラマーであっても、より高度なトピックに関する強力なチュートリアルによってもたらされる勇気の感覚から利益を得ることができます。
チュートリアルを完了した読者は、そのトピックに関する0の知識から導かれたように感じ、基礎を理解し、より多くのことを学び、さらに実験することに興奮している必要があります。
(TBR)

=begin original

Tutorials can certainly use real-world examples when that helps make for
clear, relatable demonstrations, so long as they keep the focus on
teaching--more practical problem-solving should be left to the realm
of cookbooks (as described below). Tutorials also needn't concern
themselves with explanations into why or how things work beneath the
surface, or explorations of alternate syntaxes and solutions; these are
better handled by explainers and reference pages.

=end original

チュートリアルでは、明確で関連性のあるデモンストレーションを行うのに役立つ実世界の例を使用することができます。
ただし、彼らが教えることに焦点を当てている場合に限ります--より実践的な問題解決は、クックブックの領域に任せるべきです(後述)。
また、チュートリアルでは、物事が水面下でなぜ、どのように動作するかについての説明や、代替構文やソリューションの探求に関心を持つ必要はありません。
これらは、説明者やリファレンスページでより適切に処理されます。
(TBR)

=head3 Cookbook

(クックブック)

=begin original

A cookbook man page focuses on B<results>. Just like its name suggests,
it presents succinct, step-by-step solutions to a variety of real-world
problems around some topic. A cookbook's code examples serve less to
enlighten and more to provide quick, paste-ready solutions that the
reader can apply immediately to the situation facing them.

=end original

クックブック man ページは、B<結果> に焦点を当てています。
その名前が示すように、あるトピックに関するさまざまな現実世界の問題に対して、
簡潔でステップバイステップの解決策を提示しています。
クックブックのコード例は、啓蒙にはあまり役に立たず、
読者が直面している状況にすぐに適用できる、すぐに貼り付け可能な
解決策を提供するために役立ちます。

=begin original

A Perl cookbook demonstrates ways that all the tools and techniques
explained elsewhere can work together in order to achieve practical
results. Any explanation deeper than that belongs in explainers and
reference pages, instead. (Certainly, a cookbook can cross-reference
other man pages in order to satisfy the curiosity of readers who, with
their immediate problems solved, wish to learn more.)

=end original

Perlのクックブックは、他の場所で説明されているすべてのツールやテクニックが協力して実用的な結果を達成する方法を示しています。
それより深い説明は、代わりにExplainersやリファレンスページにあります(確かに、クックブックは他のmanページを相互参照して、身近な問題を解決してもっと知りたい読者の好奇心を満たすことができます)。
(TBR)

=begin original

The most prominent cookbook pages that ship with Perl itself are its
many FAQ pages, in particular C<perlfaq4> and up, which provide short
solutions to practical questions in question-and-answer style.
C<perlunicook> shows another example, containing a bevy of practical code
snippets for a variety of internationally minded text manipulations.

=end original

Perl自体に同梱されている最も有名なクックブックページは、その多くのFAQページであり、特にC<perlfaq4>以降では、実用的な問題に対する短いソリューションをQ&A形式で提供しています。
C<perlunicook>は別の例を示しており、国際的な考えを持つさまざまなテキスト操作のための実用的なコードスニペットの束を含んでいます。
(TBR)

=begin original

(An aside: I<The Documentation System> calls this mode "how-to", but
Perl's history of creative cuisine prefers the more kitchen-ready term
that we employ here.)

=end original

(余談: I<The Documentation System> はこのモードを "how-to" と
呼んでいますが、Perl の創作料理の歴史では、ここで採用しているような
キッチンレディな用語を好んでいます。)

=head3 Reference

(リファレンス)

=begin original

A reference page focuses on B<description>. Austere, uniform, and
succinct, reference pages--often arranged into a whole section of
mutually similar subpages--lend themselves well to "random access" by
a reader who knows precisely what knowledge they need, requiring only
the minimum amount of information before returning to the task at hand.

=end original

リファレンスページは B<記述> に焦点を当てています。
厳格で統一された簡潔なリファレンスページ --
相互に類似したサブページのセクション全体に配置されていることが多い -- は、
どんな知識が必要かを正確に知っていて、手元のタスクに戻る前に
最小限の情報しか必要としない読者による「ランダムアクセス」に
適しています。

=begin original

Perl's own best example of a reference work is C<perlfunc>, the
sprawling man page that details the operation of every function built
into Perl, with each function's documentation presenting the same kinds
of information in the same order as every other. For an example of a
shorter reference on a single topic, look at C<perlreref>.

=end original

Perl 独自のリファレンスの最良の例は、C<perlfunc>です。
この広大なmanページでは、Perlに組み込まれたすべての関数の操作が詳細に記述されています。
各関数の文書には、同じ種類の情報が同じ順序で記載されています。
単一のトピックに関する短い参照の例としては、C<perlreref>を参照してください。
(TBR)

=begin original

Module documentation--including that of all the modules listed in
L<C<perlmodlib>|perlmodlib>--also counts as reference. They follow
precepts similar to those laid down by the C<perlpodstyle> man page, such
as opening with an example-laden "SYNOPSIS" section, or featuring a
"METHODS" section that succinctly lists and defines an object-oriented
module's public interface.

=end original

モジュールの文書(L<C<perlmodlib>|perlmodlib>にリストされているすべてのモジュールの文書を含む)も参照としてカウントされます。
それらは、C<perlpodstyle>manページによって定められたものと同様の戒律に従います。
例えば、例を含む"SYNOPSIS"セクションで開始したり、オブジェクト指向モジュールのパブリックインターフェイスを簡潔にリストし定義する"METHODS"セクションを特集したりします。
(TBR)

=head3 Explainer

(解説)

=begin original

Explainer pages focus on B<discussion>. Each explainer dives as deep as
needed into some Perl-relevant topic, taking all the time and space
needed to give the reader a thorough understanding of it. Explainers
mean to impart knowledge through study. They don't assume that the
student has a Perl interpreter fired up and hungry for immediate examples
(as with a tutorial), or specific Perl problems that they need quick
answers for (which cookbooks and reference pages can help with).

=end original

解説ページは B<議論> に焦点を当てています。
各解説は、Perl に関連するトピックについて必要なだけ深く掘り下げ、
読者にそのトピックを完全に理解してもらうために必要な時間とスペースを
すべて取り入れています。
解説とは、学習を通じて知識を伝えることを意味します。
解説は、学習者が Perl インタプリタを起動していて、すぐに役立つ例
(チュートリアルなど)や、Perl に関する具体的な問題
(どのクックブックやリファレンスページが役立つか)を求めているとは
想定していません。
(TBR)

=begin original

Outside of its reference pages, most of Perl's manual belongs to this
mode. This includes the majority of the man pages whose names start with
"C<perl>". A fine example is C<perlsyn>, the Perl Syntax page, which
explores the whys and wherefores of Perl's unique syntax in a
wide-ranging discussion laden with many references to the language's
history, culture, and driving philosophies.

=end original

リファレンスページ以外では、Perlのマニュアルのほとんどはこのモードに属しています。
これには、"C<perl>"で始まる名前のマニュアルページの大部分が含まれています。
優れた例として、Perl SyntaxページであるC<perlsyn>があります。
このページでは、Perlの歴史、文化、駆動哲学に関する多くの参考文献を集めた広範な議論の中で、Perl独自の構文のなぜなのか、なぜなのかを探っています。
(TBR)

=begin original

Perl's explainer pages give authors a chance to explore Perl's penchant
for L<TMTOWTDI|perlglossary/TMTOWTDI>, illustrating alternate and even
obscure ways to use the language feature under discussion. However, as
the remainder of this guide discusses, the ideal Perl documentation
manages to deliver its message clearly and concisely, and not confuse
mere wordiness for completeness.

=end original

Perlの解説ページでは、PerlのL<TMTOWTDI|perlglossary/TMTOWTDI>への傾向を探る機会を提供しており、議論中の言語機能を使用する別の、あるいはあいまいな方法を説明しています。
しかし、このガイドの残りの部分で説明しているように、理想的なPerl文書は、そのメッセージを明確かつ簡潔に伝えることができ、単なる言葉づかいを完全さと混同することはありません。
(TBR)

=head3 Further notes on documentation modes

(文書のモードに関するさらなる説明)

=begin original

Keep in mind that the purpose of this categorization is not to dictate
content--a very thorough explainer might contain short reference
sections of its own, for example, or a reference page about a very
complex function might resemble an explainer in places (e.g.
L<C<open>|perlfunc/open FILEHANDLE,MODE,EXPR>). Rather, it makes sure
that the authors and contributors of any given man page agree on what
sort of audience that page addresses.

=end original

このカテゴリー化の目的は、内容を記述することではないことに注意してください。
たとえば、非常に詳細な説明者には、それ自体の短い参照セクションが含まれている場合や、非常に複雑な関数に関する参照ページが場所によって説明者に似ている場合があります(例:L<C<open>|perlfunc/open FILEHANDLE,MODE,EXPR>)。
むしろ、このカテゴリーは、あるmanページの著者と寄稿者が、そのページが扱う読者の種類について合意していることを確認します。
(TBR)

=begin original

If a new or otherwise uncategorized man page presents itself as
resistant to fitting into only one of the four modes, consider breaking
it up into separate pages. That may mean creating a new "C<perl[...]>"
man page, or (in the case of module documentation) making new packages
underneath that module's namespace that serve only to hold additional
documentation. For instance, C<Example::Module>'s reference documentation
might include a see-also link to C<Example::Module::Cookbook>.

=end original

新しい、あるいは分類されていないmanページが、4つのモードのうちの1つだけに適合することに抵抗を示す場合は、それを別のページに分割することを検討してください。
それは、新しい"C<perl[.]>"manページを作成すること、または(モジュール文書の場合)そのモジュールの名前空間の下に、追加の文書を保持するためだけに機能する新しいパッケージを作成することを意味します。
例えば、C<Example::Module>のリファレンス文書には、C<Example::Module::Cookbook>へのsee-alsoリンクが含まれている場合があります。
(TBR)

=begin original

Perl's several man pages about Unicode--comprising a short tutorial, a
thorough explainer, a cookbook, and a FAQ--provide a fine example of
spreading a complicated topic across several man pages with different
and clearly indicated purposes.

=end original

PerlのUnicodeに関するいくつかのマニュアルページ(短いチュートリアル、徹底した解説、料理本、FAQから構成されています)は、複雑なトピックを、明確に示された異なる目的を持ついくつかのマニュアルページに広げていくための素晴らしい例を提供しています。
(TBR)

=head2 Assume readers' intelligence, but not their knowledge

(読者の知性は仮定するが、知識は仮定しない)

=begin original

Perl has grown a great deal from its humble beginnings as a tool for
people already well versed in C programming and various Unix utilities.
Today, a person learning Perl might come from any social or
technological background, with a range of possible motivations
stretching far beyond system administration.

=end original

Perlは、CプログラミングやさまざまなUnixユーティリティーに精通している人たちのためのツールとして、ささやかな始まりから大きく成長してきました。
今日では、Perlを学ぶ人は、社会や技術の背景を問わず、さまざまな動機がシステム管理をはるかに超えている可能性があります。
(TBR)

=begin original

Perl's core documentation must recognize this by making as few
assumptions as possible about the reader's prior knowledge. While you
should assume that readers of Perl's documentation are smart, curious,
and eager to learn, you should not confuse this for pre-existing
knowledge about any other technology, or even programming in
general--especially in tutorial or introductory material.

=end original

Perlのコア文書は、読者の事前知識に関する前提をできるだけ少なくすることによって、このことを認識する必要があります。
Perlの文書の読者は、頭が良く、好奇心があり、学ぶことに熱心であると想定する必要がありますが、これを、他の技術やプログラミング全般(特にチュートリアルや入門資料)に関する既存の知識と混同しないでください。
(TBR)

=head3 Keep Perl's documentation about Perl

(Perl の文書は Perl だけにする)

=begin original

Outside of pages tasked specifically with exploring Perl's relationship
with other programming languages, the documentation should keep the
focus on Perl. Avoid drawing analogies to other technologies that the
reader may not have familiarity with.

=end original

特にPerlと他のプログラミング言語との関係を調べることを目的としたページ以外では、この文書はPerlに焦点を当てるべきです。
読者があまり知らない他の技術に類似したものを書くことは避けてください。
(TBR)

=begin original

For example, when documenting one of Perl's built-in functions, write as
if the reader is now learning about that function for the first time, in
any programming language.

=end original

たとえば、Perlの組み込み関数の1つを記述する場合は、読者がその関数について、どのプログラミング言語でも初めて学習したかのように記述します。
(TBR)

=begin original

Choosing to instead compare it to an equivalent or underlying C function
will probably not illuminate much understanding in a contemporary
reader. Worse, this can risk leaving readers unfamiliar with C feeling
locked out from fully understanding of the topic--to say nothing of
readers new to computer programming altogether.

=end original

その代わりに、それを同等の、あるいは基礎となるC関数と比較することを選択しても、現代の読者の理解にあまり光を当てることにはならないでしょう。
さらに悪いことに、Cに馴染みのない読者このトピックを完全に理解することから締め出されたように感じる可能性があります。
言うまでもなく、コンピュータープログラミングにまったく不慣れな読者はなおさらです。
(TBR)

=begin original

If, however, that function's ties to its C roots can lead to deeper
understanding with practical applications for a Perl programmer, you may
mention that link after its more immediately useful documentation.
Otherwise, omit this information entirely, leaving it for other
documentation or external articles more concerned with examining Perl's
underlying implementation details.

=end original

しかし、その関数とCのルートとの結びつきが、Perlプログラマーのための実用的なアプリケーションをより深く理解することにつながるのであれば、すぐに役立つ文書の後にそのリンクを挙げることができます。
そうでない場合は、この情報を完全に省略し、Perlの基礎となる実装の詳細を調べることに関心を持つ他の文書や外部の記事に残してください。
(TBR)

=head3 Deploy jargon when needed, but define it as well

(必要なら専門用語を使うが、定義する)

=begin original

Domain-specific jargon has its place, especially within documentation.
However, if a man page makes use of jargon that a typical reader might
not already know, then that page should make an effort to define the
term in question early-on--either explicitly, or via cross reference.

=end original

ドメイン固有の専門用語には、特に文書内での役割があります。
ただし、一般的な読者がまだ知らない専門用語をmanページで使用している場合は、そのページで問題の用語を早期に(明示的に、または相互参照によって)定義するように努力する必要があります。
(TBR)

=begin original

For example, Perl loves working with filehandles, and as such that word
appears throughout its documentation. A new Perl programmer arriving at
a man page for the first time is quite likely to have no idea what a
"filehandle" is, though. Any Perl man page mentioning filehandles
should, at the very least, hyperlink that term to an explanation
elsewhere in Perl's documentation. If appropriate--for example, in the
lead-in to L<C<open> function's detailed reference|perlfunc/open
FILEHANDLE,MODE,EXPR>--it can also include a very short in-place
definition of the concept for the reader's convenience.

=end original

例えば、Perlはファイルハンドルを扱うのが好きなので、Perlの文書全体にその言葉が出てきます。
しかし、初めてmanページに到着したPerlプログラマーは、「ファイルハンドル」とは何かを知らない可能性が非常に高くなります。
Perl manページでファイルハンドルについて言及している場合は、少なくとも、その用語をPerlの文書の別の場所にある説明にハイパーリンクする必要があります。
L<C<open>関数の詳細なリファレンス|perlfunc/open FILEHANDLE,MODE,EXPR>のように適切な場合には、読者の便宜のために、この概念の非常に短い定義をその場で含めることもできます。
(TBR)

=head2 Use meaningful variable and symbol names in examples

(例では意味のある変数名とシンボル名を使う)

=begin original

When quickly sketching out examples, English-speaking programmers have a
long tradition of using short nonsense words as placeholders for
variables and other symbols--such as the venerable C<foo>, C<bar>, and
C<baz>. Example code found in a programming language's official,
permanent documentation, however, can and should make an effort to
provide a little more clarity through specificity.

=end original

簡単に例を説明すると、英語を話すプログラマは、変数やその他の記号(由緒あるC<foo>、C<bar>、C<baz>など)のプレースホルダとして短いナンセンスワードを使用する長い伝統を持っています。
しかし、プログラミング言語の公式で永続的な文書にあるサンプルコードは、特異性を通してもう少し明確にする努力をすることができますし、すべきです。
(TBR)

=begin original

Whenever possible, code examples should give variables, classes, and
other programmer-defined symbols names that clearly demonstrate their
function and their relationship to one another. For example, if an
example requires that one class show an "is-a" relationship with
another, consider naming them something like C<Apple> and C<Fruit>, rather
than C<Foo> and C<Bar>. Similarly, sample code creating an instance of
that class would do better to name it C<$apple>, rather than C<$baz>.

=end original

可能な限り、コード例では、変数、クラス、その他のプログラマが定義したシンボルに、その機能と相互の関係を明確に示す名前を付ける必要があります。
たとえば、あるクラスが別のクラスと「is-a」関係を示す必要がある場合は、C<Foo>とC<Bar>ではなく、C<Apple>とC<Fruit>のような名前を付けることを検討してください。
同様に、そのクラスのインスタンスを作成するサンプルコードでは、C<$baz>ではなくC<$apple>という名前を付ける方が適切です。
(TBR)

=begin original

Even the simplest examples benefit from clear language using concrete
words. Prefer a construct like C<for my $item (@items) { ... }> over
C<for my $blah (@blah) { ... }>.

=end original

最も単純な例であっても、具体的な単語を使用した明確な言語の利点があります。
C<for my$blah(@blah){.}>よりもC<for my$item(@items){.}>のような構文を優先してください。
(TBR)

=head2 Write in English, but not just for English-speakers

(英語で書くが、英語話者だけのためではない)

=begin original

While this style guide does specify American English as the
documentation's language for the sake of internal consistency, authors
should avoid cultural or idiomatic references available only to
English-speaking Americans (or any other specific culture or society).
As much as possible, the language employed by Perl's core documentation
should strive towards cultural universality, if not neutrality. Regional
turns of phrase, examples drawing on popular-culture knowledge, and
other rhetorical techniques of that nature should appear sparingly, if
at all.

=end original

このスタイルガイドでは、内部一貫性のために文書の言語としてアメリカ英語を指定していますが、著者は、英語を話すアメリカ人(またはその他の特定の文化や社会)のみが利用できる文化やイディオムの参照を避けるべきです。
Perlのコア文書で使用されている言語は、中立ではないにしても、文化の普遍性に向けて努力すべきです。
地域的な言い回し、大衆文化の知識を利用した例、その他の修辞技法は、あったとしても控え目に表示されるべきです。
(TBR)

=begin original

Authors should feel free to let more freewheeling language flourish in
"second-order" documentation about Perl, like books, blog entries, and
magazine articles, published elsewhere and with a narrower readership in
mind. But Perl's own docs should use language as accessible and
welcoming to as wide an audience as possible.

=end original

著者は、書籍、ブログ記事、雑誌記事など、Perlに関する「二次」文書において、より自由な言語を自由に使用できるようにすべきです。
これらは他の場所で、より狭い閲読率を念頭に置いて出版されています。
しかし、Perl自身の文書では、できるだけ多くの読者に対してアクセス可能で歓迎される言語を使用すべきです。
(TBR)

=head2 Omit placeholder text or commentary

(プレースホルダやコメントは省く)

=begin original

Placeholder text does not belong in the documentation that ships with
Perl. No section header should be followed by text reading only "Watch
this space", "To be included later", or the like. While Perl's source
files may shift and alter as much as any other actively maintained
technology, each released iteration of its technology should feel
complete and self-contained, with no such future promises or other loose
ends visible.

=end original

プレースホルダテキストは、Perlに付属の文書には含まれていません。
セクションヘッダーの後に、"Watch this space"や"To be included later"などと読むだけのテキストを置くべきではありません。
Perlのソースファイルは他の活発に維持されている技術と同じように変化し変化する可能性がありますが、その技術のリリースされた各イテレーションは完全で自己完結したものと感じられ、そのような将来の約束やその他のあいまいな目的は見えないはずです。
(TBR)

=begin original

Take advantage of Perl's regular release cycle. Instead of cluttering
the docs with flags promising more information later--the presence of
which do not help readers at all today--the documentation's
maintenance team should treat any known documentation absences as an
issue to address like any other in the Perl project. Let Perl's
contributors, testers, and release engineers address that need, and
resist the temptation to insert apologies, which have all the utility in
documentation as undeleted debug messages do in production code.

=end original

Perlの定期的なリリースサイクルを活用してください。
文書にフラグを付けて後で詳細情報を約束するような早口言語症を与えるのではなく(その存在は今日の読者にはまったく役に立たない)、文書の保守チームは、既知の文書の不在をPerlプロジェクトの他の問題と同じように対処すべき問題として扱うべきです。
Perlのコントリビュータ、テスター、リリースエンジニアにその必要性に対処させ、謝罪を挿入する誘惑に抵抗させましょう。
謝罪は、削除されないデバッグメッセージが実動コードで行うように、文書にもすべての利点があります。
(TBR)

=head2 Apply section-breaks and examples generously

(節の区切りと例を豊富に適用する)

=begin original

No matter how accessible their tone, the sight of monolithic blocks of
text in technical documentation can present a will-weakening challenge
for the reader. Authors can improve this situation through breaking long
passages up into subsections with short, meaningful headers.

=end original

彼らのトーンがどれほどアクセス可能であっても、技術文書の中にモノリシックなテキストのブロックがあることは、読者に意志を弱める挑戦を提示する可能性があります。
著者は、長い文章を短くて意味のあるヘッダーを持つサブセクションに分割することで、この状況を改善できます。
(TBR)

=begin original

Since every section-header in Pod also acts as a potential end-point for
a cross-reference (made via Pod's C<LE<lt>...E<gt>> syntax), putting
plenty of subsections in your documentation lets other man pages more
precisely link to a particular topic. This creates hyperlinks directly
to the most appropriate section rather than to the whole page in
general, and helps create a more cohesive sense of a rich, consistent,
and interrelated manual for readers.

=end original

Podのすべてのセクションヘッダは、相互参照(PodのC<LE<lt>.E<gt>>構文を介して行われる)の潜在的なエンドポイントとしても機能するので、文書にたくさんのサブセクションを置くことで、他のmanページが特定のトピックにもっと正確にリンクすることができます。
これにより、一般的なページ全体ではなく、最も適切なセクションに直接ハイパーリンクが作成され、読者のために、リッチで一貫性のある相互に関連するマニュアルのよりまとまりのある感覚を作り出すのに役立ちます。
(TBR)

=begin original

Among the four documentation modes, sections belong more naturally in
tutorials and explainers. The step-by-step instructions of cookbooks, or
the austere definitions of reference pages, usually have no room for
them. But authors can always make exceptions for unusually complex
concepts that require further breakdown for clarity's sake.

=end original

4つの文書モードの中で、セクションはより自然にチュートリアルと解説者に属しています。
クックブックのステップバイステップの説明や、リファレンスページの厳格な定義には、通常、それらのためのスペースがありません。
しかし、著者は、明確にするためにさらに詳細な分析を必要とする異常に複雑な概念については、常に例外を設けることができます。
(TBR)

=begin original

Example code, on the other hand, can be a welcome addition to any mode
of documentation. Code blocks help break up a man page visually,
reassuring the reader that no matter how deep the textual explanation
gets, they are never far from another practical example showing how it
all comes together using a small, easy-to-read snippet of tested Perl
code.

=end original

一方、サンプルコードは、どのモードの文書に追加しても歓迎できます。
コードブロックは man ページを視覚的に分解するのに役立ち、テキストによる
説明がどんなに深くなっても、テストされた Perl コードの小さく読みやすい
スニペットを使ってすべてがどのように組み合わされるかを示す別の実践的な
例から遠くないことで読者に安心させます。

=head2 Lead with common cases and best practices

(一般的な状況と最良の習慣を導く)

=begin original

Perl famously gives programmers more than one way to do things. Like any
other long-lived programming language, Perl has also built up a large,
community-held notion of best practices, blessing some ways to do things
as better than others, usually for the sake of more maintainable code.

=end original

Perlは、プログラマーに複数の方法を提供することで有名です。
他の長きにわたるプログラミング言語と同様に、Perlもまた、コミュニティが支持する大規模なベストプラクティスの概念を構築し、ある方法が他の方法よりも優れていることを祝福しています。
これは通常、コードをより保守しやすいものにするためです。
(TBR)

=head3 Show the better ways first

(良い方法を最初に示す)

=begin original

Whenever it needs to show the rules for a technique which Perl provides
many avenues for, the documentation should always lead with best
practices. And when discussing some part of the Perl toolkit with many
applications, the docs should begin with a demonstration of its
application to the most common cases.

=end original

Perlが多くの手段を提供する手法のルールを示す必要がある場合には、文書は常にベストプラクティスを示すべきです。
また、Perlツールキットの一部を多くのアプリケーションで説明する場合には、最も一般的なケースへの適用のデモンストレーションから始めるべきです。
(TBR)

=begin original

The C<open> function, for example, has myriad potential uses within Perl
programs, but I<most of the time> programmers--and especially those new
to Perl--turn to this reference because they simply wish to open a
file for reading or writing. For this reason, C<open>'s documentation
begins there, and only descends into the function's more obscure uses
after thoroughly documenting and demonstrating how it works in the
common case. Furthermore, while engaging in this demonstration, the
C<open> documentation does not burden the reader right away with detailed
explanations about calling C<open> via any route other than the
best-practice, three-argument style. 

=end original

例えば、C<open>関数はPerlプログラム内で無数の潜在的な用途を持っていますが、私<ほとんどの場合>プログラマー、特にPerlに慣れていないプログラマーは、単にファイルを開いて読み書きしたいだけなので、このリファレンスに目を向けます。
このため、C<open>の文書はそこから始まり、一般的なケースでどのように機能するかを徹底的に文書化し、実証した後に、関数のよりあいまいな用途へと進んでいきます。
さらに、このデモンストレーションを行っている間、C<open>の文書は、ベストプラクティスである3つの引数スタイル以外の方法でC<open>を呼び出すことについての詳細な説明をすぐに読者に負担させるものではありません。
(TBR)

=head3 Show the lesser ways when needed

(必要ならより劣る方法も示す)

=begin original

Sometimes, thoroughness demands documentation of deprecated techniques.
For example, a certain Perl function might have an alternate syntax now
considered outmoded and no longer best-practice, but which a maintainer
of a legacy project might quite reasonably encounter when exploring old
code. In this case, these features deserve documentation, but couched in
clarity that modern Perl avoids such structures, and does not recommend
their use in new projects.

=end original

徹底させるために、廃止された手法の文書化が必要になるになることもあります。
例えば、あるPerl関数には現在時代遅れでベストプラクティスではないと考えられている代替構文がありますが、レガシープロジェクトのメンテナが古いコードを調査する際に遭遇する可能性があります。
この場合、これらの機能は文書化に値しますが、現代のPerlはそのような構造を避けており、新しいプロジェクトでの使用を推奨していないことを明確に説明しています。
(TBR)

=begin original

Another way to look at this philosophy (and one L<borrowed from our
friends|https://devguide.python.org/documenting/#affirmative-tone> on
Python's documentation team) involves writing while sympathizing with a
programmer new to Perl, who may feel uncertain about learning a complex
concept. By leading that concept's main documentation with clear,
positive examples, we can immediately give these readers a simple and
true picture of how it works in Perl, and boost their own confidence to
start making use of this new knowledge. Certainly we should include
alternate routes and admonitions as reasonably required, but we needn't
emphasize them. Trust the reader to understand the basics quickly, and
to keep reading for a deeper understanding if they feel so driven.

=end original

この哲学を見るもう1つの方法は(Pythonの文書チームで L<borrowed from our
friends|https://devguide.python.org/documenting/#affirmative-tone>)、複雑な概念を学ぶことに不安を感じるかもしれないPerlに慣れていないプログラマーに共感しながら書くことです。
その概念の主要な文書を明確で肯定的な例で導くことによって、Perlでどのように動作するかを簡単で真の姿ですぐに読者に伝えることができ、読者自身が自信を持ってこの新しい知識を活用し始めることができます。
もちろん、合理的に必要とされる代替ルートや注意事項を含める必要がありますが、強調する必要はありません。
読者が基本をすばやく理解し、読者が気になるようであれば、本を読み続けて理解を深めることを信じてください。
(TBR)

=head2 Document Perl's present

(Perl の現在を文書化する)

=begin original

Perl's documentation should stay focused on Perl's present behavior,
with a nod to future directions.

=end original

Perl の文書は、Perl の将来の方向性を向きながら、現在の振る舞いに
焦点を当てるべきです。

=head3 Recount the past only when necessary

(必要なときにだけ、過去を列挙する)

=for comment
The principles of this section caused a lot of lively discussion and
debate among p5p when first proposed in October 2020. I am keeping the
recommendations nonspecific, and expect this section to receive a lot of
further refinement as we start to apply it to core docs.

=begin original

When some Perl feature changes its behavior, documentation about
that feature should change too, and just as definitively. The docs have
no obligation to keep descriptions of past behavior hanging around, even if
attaching clauses like "Prior to version 5.10, [...]".

=end original

何らかの Perl の機能の振る舞いが変更された場合、その機能に関する
文書も明確に変更されるはずです;
文書には、たとえ "Prior to version 5.10, [...]" のような節を付けても、
過去の動作に関する記述を保持する義務はありません。

=begin original

Since Perl's core documentation is part of Perl's source distribution,
it enjoys the same benefits of versioning and version-control as the
source code of Perl itself. Take advantage of this, and update the text
boldly when needed. Perl's history remains safe, even when you delete or
replace outdated information from the current version's docs.

=end original

Perl のコア文書は Perl のソース配布物の一部なので、Perl 自体のソースコードと
同じバージョン付けとバージョン管理の利点を享受しています。
これを利用して、必要に応じて大胆にテキストを更新してください。
現在のバージョンの文書から古い情報を削除したり置き換えたりしても、
Perl の履歴は安全です。

=begin original

Perl's docs can acknowledge or discuss former behavior when warranted,
including notes that some feature appeared in the language as of some
specific version number. Authors should consider applying principles
similar to those for deprecated techniques, L<as described above|/Show
the lesser ways when needed>: make the information present, but not
prominent.

=end original

Perl の文書では、正当な理由があれば、以前の動作を知らせたり
議論したりすることができます;
その中には、特定のバージョン番号の時点で言語に何らかの機能が現れたという
記述も含まれます。
著者は、L<前述のように|/Show the lesser ways when needed>
廃止予定の技術の場合と同様の原則を適用することを考慮すべきです:
情報を提示するが目立たないようにしましょう。

=begin original

Otherwise, keep the past in the past. A manual uncluttered with
outdated instruction stays more succinct and relevant.

=end original

さもなければ、過去を過去のままにします。
古くなった説明で散らかっていないマニュアルは、
より簡潔で適切なものになります。

=head3 Describe the uncertain future with care

(不確実な将来については慎重に記述する)

=begin original

Perl features marked as "experimental"--those that generate warnings
when used in code not invoking the L<C<experimental>|experimental>
pragma--deserve documentation, but only in certain contexts, and even
then with caveats. These features represent possible new directions for
Perl, but they have unstable interfaces and uncertain future presence.

=end original

"experimental" とマークされた Perl の機能
(L<C<experimental>|experimental>プラグマを呼び出さないコードで
使用された場合に警告を生成する機能)は、文書化する必要がありますが、
特定の状況でのみ、また警告が表示されます。
これらの機能は、Perlの新しい方向性を示す可能性がありますが、
不安定なインターフェイスと不確実な将来の存在を持っています。
(TBR)

=begin original

The documentation should take both implications of "experimental"
literally. It should not discourage these features' use by programmers
who wish to try out new features in projects that can risk their
inherent instability; this experimentation can help Perl grow and
improve. By the same token, the docs should downplay these features' use
in just about every other context.

=end original

文書は、文字通り"実験的"という両方の意味を持つべきです。
プロジェクトで新しい機能を試したいプログラマが、
本来の不安定性を危険にさらす可能性のあるこれらの機能を使用することを
妨げるべきではありません。
この実験はPerlの成長と改善を助けることができます。
同様に、文書は、他のほとんどすべての状況でこれらの機能を
使用することを軽視すべきです。
(TBR)

=begin original

Introductory or overview material should omit coverage of experimental
features altogether.

=end original

導入または概要の資料では、実験的機能の扱いを完全に省略すべきです。

=begin original

More thorough reference materials or explanatory articles can include
experimental features, but needs to clearly mark them as such, and not
treat them with the same prominence as Perl's stable features. Using
unstable features seldom coincides with best practices, and
documentation that L<puts best practices first|/Lead with common cases
and best practices> should reflect this.

=end original

より詳細な参考資料や解説記事には、実験的な機能を含めることができますが、
実験的な機能であることを明確に示す必要があり、Perlの安定した機能と
同じように顕著に扱わないようにする必要があります。
不安定な機能を使用することがベストプラクティスと
一致することはほとんどありません;
L<puts best practices first|/Lead with common cases
and best practices>という文書には、これを反映する必要があります。
(TBR)

=head2 The documentation speaks with one voice

(文書は一人の声で話す)

=begin original

Even though it comes from many hands and minds, criss-crossing through
the many years of Perl's lifetime, the language's documentation should
speak with a single, consistent voice. With few exceptions, the docs
should avoid explicit first-person-singular statements, or similar
self-reference to any individual's contributor's philosophies or
experiences.

=end original

Perl の文書は、Perl の生涯の長い年月をかけて交差してきた多くの人の手と心から
生まれたものではありますが、言語の文書は一貫した単一の声で
記述する必要があります。
少数の例外を除いて、文書は、明確な一人称単数の文や、個々の寄稿者の
哲学や経験に対する同様の自己参照を避けるべきです。

=begin original

Perl did begin life as a deeply personal expression by a single
individual, and this famously carried through the first revisions of its
documentation as well. Today, Perl's community understands that the
language's continued development and support comes from many people
working in concert, rather than any one person's vision or effort. Its
documentation should not pretend otherwise.

=end original

Perl は一人の個人による非常に個人的な表現として誕生しました;
このことは文書の最初の版でもよく知られています。
今日、Perl のコミュニティは、言語の継続的な開発とサポートは、一人の
人間のビジョンや努力ではなく、協力して働く多くの人たちによって
もたらされていることを理解しています。
Perl の文書は、そうでないふりをすべきではありません。

=begin original

The documentation should, however, carry forward the best tradition that
Larry Wall set forth in the language's earliest days: Write both
economically and with a humble, subtle wit, resulting in a technical
manual that mixes concision with a friendly approachability. It avoids
the dryness that one might expect from technical documentation, while
not leaning so hard into overt comedy as to distract and confuse from
the nonetheless-technical topics at hand.

=end original

しかし、文書は、Larry Wall が言語の初期に述べた最高の伝統を
継承する必要があります:
経済的に、そして謙虚で繊細な機知を持って書くことで、その結果、
簡潔さと親しみやすさを混ぜた技術マニュアルが作成されます。
それは、技術的な文書に想定されるような無味乾燥さを回避すると同時に、
目の前の技術的なトピックから注意をそらしたり混乱させたりするような
露骨なコメディーに熱心になることもありません。

=begin original

Like the best written works, Perl's documentation has a soul. Get
familiar with it as a reader to internalize its voice, and then find
your own way to express it in your own contributions. Writing clearly,
succinctly, and with knowledge of your audience's expectations will get
you most of the way there, in the meantime.

=end original

最も優れた著作と同様に、Perl の文書にも魂があります。
読者として Perl に慣れ親しんでその声を内部化し、自分自身の貢献の中で
それを表現する独自の方法を見つけてください。
明確に、簡潔に、そして読者の期待を理解した上で書くことで、その間の
大部分を得ることができます。

=begin original

Every line in the docs--whether English sentence or Perl
statement--should serve the purpose of bringing understanding to the
reader. Should a sentence exist mainly to make a wry joke that doesn't
further the reader's knowledge of Perl, set it aside, and consider
recasting it into a personal blog post or other article instead.

=end original

英文であろうとPerl文であろうと、文書のすべての行は、
読者に理解をもたらす目的に役立つべきです。
Perl に関する読者の知識を深めることができないような
下品なジョークを作るための文が主に存在する場合は、それを脇に置いて、
個人的なブログ記事や他の記事に再投稿することを検討してください。

=begin original

Write with a light heart, and a miserly hand. 

=end original

軽い心と計算高い手で書きましょう。

=head1 INDEX OF PREFERRED TERMS

=begin original

L<As noted above|/Choice of underlying style guide: CMOS>, this guide
"inherits" all the preferred terms listed in the Chicago Manual of
Style, 17th edition, and adds the following terms of particular interest
to Perl documentation.

=end original

L<前述のように|/Choice of underlying style guide:CMOS>、このガイドは
Chicago Manual of Style, 17th edition にリストされているすべての
好ましい用語を「継承」し、Perl 文書に特に関心のある次の用語を追加しています。

=over

=item built-in function

=begin original

Not "builtin".

=end original

"builtin" ではありません。

=item Darwin

=begin original

See L<macOS|/macOS>.

=end original

L<macOS|/macOS> を参照してください。

=item macOS

=begin original

Use this term for Apple's operating system instead of "Mac OS X" or
variants thereof.

=end original

この用語は、"Mac OS X" またはその変種ではなく、Apple の
オペレーティングシステムに使ってください。

=begin original

This term is also preferable to "Darwin", unless one needs to refer
to macOS's Unix layer specifically.

=end original

この用語は、特に macOS の Unix 層を参照する必要がない限り、
"Darwin" よりも望ましいです。

=item man page

=begin original

One unit of Unix-style documentation. Not "manpage". Preferable to "manual page".

=end original

Unix スタイルの文書の 1 単位。
"manpage" ではなく、"manual page" よりも望ましいです。

=item Perl; perl

=begin original

The name of the programming language is Perl, with a leading capital
"P", and the remainder in lowercase. (Never "PERL".)

=end original

プログラミング言語の名前は Perl です;
先頭の大文字は "P"、残りは小文字です。
("PERL" ではありません。)

=begin original

The interpreter program that reads and executes Perl code is named
"C<perl>", in lowercase and in monospace (as with any other command
name).

=end original

Perl コードを読み取って実行するインタプリタプログラムは、
(他のコマンド名と同様)小文字とモノスペースで "C<perl>" と呼ばれます。

=begin original

Generally, unless you are specifically writing about the
command-line C<perl> program (as, for example, L<C<perlrun>|perlrun>
does), use "Perl" instead.

=end original

コマンドライン C<perl> プログラムについて特に記述する場合(たとえば、
L<C<perlrun>|perlrun> のように記述する場合)を除き、
通常は "Perl" を使います。

=item Perl 5

=begin original

Documentation need not follow Perl's name with a "5", or any other
number, except during discussions of Perl's history, future plans,
or explicit comparisons between major Perl versions.

=end original

Perl の歴史、将来の計画、主要な Perl バージョン間の明示的な比較を
議論する場合を除き、文書は Perl の名前の後に "5" や他の数字を
続ける必要はありません。

=begin original

Before 2019, specifying "Perl 5" was sometimes needed to distinguish
the language from Perl 6. With the latter's renaming to "Raku", this
practice became unnecessary.

=end original

2019 年以前は、Perl 6 と言語を区別するために "Perl 5" を指定する必要が
ありました。
Perl 6 が "Raku" に名称変更されたため、この方法は不要になりました。

=item Perl 6

=begin original

See L<Raku|/Raku>.

=end original

L<Raku|/Raku> を参照してください。

=item Perl 5 Porters, the; porters, the; p5p

=begin original

The full name of the team responsible for Perl's ongoing maintenance
and development is "the Perl 5 Porters", and this sobriquet should
be spelled out in the first mention within any one document. It may
thereafter call the team "the porters" or "p5p".

=end original

Perl の継続的な保守と開発を担当するチームのフルネームは
"Perl 5 Porters" です;
この名前は、どの文書でも最初に言及されるときには、
省略されずに記述されるべきです。
その後、チームを "the porters" または "p5p" と呼ぶことができます。

=begin original

Not "Perl5 Porters".

=end original

"Perl5 Porters" ではありません。

=item program

=begin original

The most general descriptor for a stand-alone work made out of
executable Perl code. Synonymous with, and preferable to, "script".

=end original

実行可能な Perl コードで作成されたスタンドアロン作業の最も一般的な記述子。
"script" と同義であり、"script" よりも望ましい。

=item Raku

=begin original

Perl's "sister language", whose homepage is L<https://raku.org>.

=end original

Perl の「姉妹言語」で、ホームページは L<https://raku.org> です。

=begin original

Previously known as "Perl 6". In 2019, its design team renamed the
language to better reflect its identity as a project independent from
Perl. As such, Perl's documentation should always refer to this language
as "Raku" and not "Perl 6".

=end original

以前は "Perl 6" として知られていました。
2019 年に、この設計チームは、Perl から独立したプロジェクトとしての
アイデンティティをよりよく反映するために、この言語の名前を変更しました。
そのため、Perl の文書では、この言語を常に
"Perl 6" ではなく "Raku" と呼ぶべきです。

=item script

=begin original

See L<program|/program>.

=end original

L<program|/program> を参照してください。

=item semicolon

=begin original

Perl code's frequently overlooked punctuation mark. Not "semi-colon".

=end original

見過ごされることが多い Perl コードの約物。
"semi-colon" ではありません。

=item Unix

=begin original

Not "UNIX", "*nix", or "Un*x". Applicable to both the original operating
system from the 1970s as well as all its conceptual descendants. You may
simply write "Unix" and not "a Unix-like operating system" when
referring to a Unix-like operating system.

=end original

"UNIX", "*nix", "Un*x" ではありません。
1970 年代のオリジナルのオペレーティングシステムと、
そのすべての概念的な子孫の両方に適用できます。
Unix 風のオペレーティングシステムを参照する場合は、"Unix" とだけ
記述し、"Unix 風のオペレーティングシステム"とは記述しません。

=back

=head1 SEE ALSO

=over

=item *

L<perlpod|perlpod>

=item *

L<perlpodstyle|perlpodstyle>

=back

=head1 AUTHOR

=begin original

This guide was initially drafted by Jason McIntosh
(jmac@jmac.org), under a grant from The Perl Foundation.

=end original

このガイドは当初、JJason McIntosh (jmac@jmac.org) が The Perl Foundation の
助成を受けて作成しました。

=for comment Additional contributors can get listed here (and this
comment deleted), when there are some.

=begin meta

Translate: Kentaro Shirakata <argrath@ub32.org>
Status: in progress

=end meta

