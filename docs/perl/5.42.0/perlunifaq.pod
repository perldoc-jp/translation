
=encoding utf8

=head1 NAME

=begin original

perlunifaq - Perl Unicode FAQ

=end original

perlunifaq - Perl Unicode FAQ

=head1 Q and A

=begin original

This is a list of questions and answers about Unicode in Perl, intended to be
read after L<perlunitut>.

=end original

これは、L<perlunitut> の後で読むことを想定した、Perl での Unicode に関する
質問と答えの一覧です。

=head2 perlunitut isn't really a Unicode tutorial, is it?

(perlunitut は実際には Unicode チュートリアルじゃないんじゃないの?)

=begin original

No, and this isn't really a Unicode FAQ.

=end original

はい、違います; そしてこれは実際には Unicode FAQ ではありません。

=begin original

Perl has an abstracted interface for all supported character encodings, so this
is actually a generic C<Encode> tutorial and C<Encode> FAQ. But many people
think that Unicode is special and magical, and I didn't want to disappoint
them, so I decided to call the document a Unicode tutorial.

=end original

Perl は対応している全ての文字エンコーディングへの抽象インターフェースを
持っているので、実際には汎用の C<Encode> チュートリアルと
C<Encode> FAQ です。
しかし、多くの人々が、Unicode は特別でマジカルなものだと考えていて、
私は彼らを失望させたくなかったので、そのドキュメントを
Unicode チュートリアルと呼ぶことに決めました。

=head2 What character encodings does Perl support?

(Perl が対応している文字エンコーディングは何?)

=begin original

To find out which character encodings your Perl supports, run:

=end original

Perl がどの文字エンコーディングに対応しているかを見つけるには、以下を
実行してください:

    perl -MEncode -le "print for Encode->encodings(':all')"

=head2 Which version of perl should I use?

(どのバージョンの perl を使うべき?)

=begin original

Well, if you can, upgrade to the most recent, but certainly C<5.8.1> or newer.
The tutorial and FAQ assume the latest release.

=end original

うーん、もし可能なら、最新にアップグレードしてください; 但し、確実に
C<5.8.1> 以降にはしてください。
チュートリアルと FAQ は最新リリースを仮定しています。

=begin original

You should also check your modules, and upgrade them if necessary. For example,
HTML::Entities requires version >= 1.32 to function correctly, even though the
changelog is silent about this.

=end original

モジュールもチェックして、もし必要ならアップグレードするべきです。
例えば HTML::Entities は、changelog は何も触れていませんが、正しく
動作するためにはバージョン >= 1.32 が必要です。

=head2 What about binary data, like images?

(イメージのようなバイナリデータはどうするの?)

=begin original

Well, apart from a bare C<binmode $fh>, you shouldn't treat them specially.
(The binmode is needed because otherwise Perl may convert line endings on Win32
systems.)

=end original

うーん、生の C<binmode $fh> を別として、特別に扱う必要はないはずです。
(Win32 システムで Perl が行端を変更しないようにするために、binmode が
必要です。)

=begin original

Be careful, though, to never combine text strings with binary strings. If you
need text in a binary stream, encode your text strings first using the
appropriate encoding, then join them with binary strings. See also: "What if I
don't encode?".

=end original

但し、決してテキスト文字列とバイナリ文字列を結合しないように
注意してください。
もしバイナリストリームにテキストが必要なら、まずテキスト文字列を適切な
エンコーディングを使ってエンコードして、それをバイナリ文字列と
結合してください。
L<"What if I don't encode?"> も参照してください。

=head2 When should I decode or encode?

(デコードやエンコードはいつ行うべき?)

=begin original

Whenever you're communicating text with anything that is external to your perl
process, like a database, a text file, a socket, or another program. Even if
the thing you're communicating with is also written in Perl.

=end original

データベース、テキストファイル、ソケット、他のプログラムといった、自分の
perl プロセスの外側にある何かとテキストを通信するときはいつでも、です。
通信の相手が Perl で書かれている場合も同じです。

=head2 What if I don't decode?

(デコードしないとどうなるの?)

=begin original

Whenever your encoded, binary string is used together with a text string, Perl
will assume that your binary string was encoded with ISO-8859-1, also known as
latin-1. If it wasn't latin-1, then your data is unpleasantly converted. For
example, if it was UTF-8, the individual bytes of multibyte characters are seen
as separate characters, and then again converted to UTF-8. Such double encoding
can be compared to double HTML encoding (C<&amp;gt;>), or double URI encoding
(C<%253E>).

=end original

エンコードされたバイナリ文字列をテキスト文字列と一緒に使ったときはいつでも、
Perl はバイナリ文字列が ISO-8859-1 またの名を latin-1 と仮定します。
もしこれが latin-1 でなかった場合、データは不愉快な形に変換されます。
例えば、もしデータが UTF-8 だった場合、マルチバイト文字のそれぞれのバイトが
文字として扱われ、それから再び UTF-8 に変換されます。
このような二重エンコードは二重 HTML エンコーディング (C<&amp;gt;>) や
二重 URI エンコーディング (C<%253E>) と比較できます。

=begin original

This silent implicit decoding is known as "upgrading". That may sound
positive, but it's best to avoid it.

=end original

この、暗黙のうちに行われるデコードは「昇格」("upgrading")と呼ばれます。
これは前向きなことに聞こえるかもしれませんが、避けるのが最良です。

=head2 What if I don't encode?

(エンコードしないとどうなるの?)

=begin original

It depends on what you output and how you output it.

=end original

何をどうやって出力するかによります。

=head3 Output via a filehandle

=over

=begin original

=item * If the string's characters are all code point 255 or lower, Perl
outputs bytes that match those code points. This is what happens with encoded
strings. It can also, though, happen with unencoded strings that happen to be
all code point 255 or lower.

=end original

=item * 文字列の文字の符号位置が全て 255 以下の場合、Perl は
その符号位置に一致するバイトを出力します。
これはエンコードされた文字列の時に起きることです。
しかし、たまたま全ての符号位置が 255 以下のエンコードされていない文字列でも
起きます。

=begin original

=item * Otherwise, Perl outputs the string encoded as UTF-8. This only happens
with strings you neglected to encode. Since that should not happen, Perl also
throws a "wide character" warning in this case.

=end original

=item * さもなければ、Perl は UTF-8 としてエンコードされた文字列を出力します。
これはあなたがエンコードを拒否した文字列にのみ起きます。
これは起きるべきではないので、Perl はこの場合
"wide character" 警告も投げます。

=back

=head3 Other output mechanisms (e.g., C<exec>, C<chdir>, ..)

(その他の出力機構 (例えば C<exec>, C<chdir>, ..))

=begin original

Your text string will be sent using the bytes in Perl's internal format.

=end original

テキスト文字列は Perl の内部フォーマットのバイトを使って送ります。

=begin original

Because the internal format is often UTF-8, these bugs are hard to spot,
because UTF-8 is usually the encoding you wanted! But don't be lazy, and don't
use the fact that Perl's internal format is UTF-8 to your advantage. Encode
explicitly to avoid weird bugs, and to show to maintenance programmers that you
thought this through.

=end original

内部形式はしばしば UTF-8 なので、このバグは発見しにくいです; なぜなら
あなたがほしいのは普通 UTF-8 だからです!
しかし、手を抜かないでください; そして Perl の内部形式が UTF-8 であることを
利用しようとしないでください。
奇妙なバグを防ぐため、そして保守プログラマに対してあなたが何を考えたかを
示すために、明示的にエンコードしてください。

=head2 Is there a way to automatically decode or encode?

(自動的にデコードやエンコードする方法はある?)

=begin original

If all data that comes from a certain handle is encoded in exactly the same
way, you can tell the PerlIO system to automatically decode everything, with
the C<encoding> layer. If you do this, you can't accidentally forget to decode
or encode anymore, on things that use the layered handle.

=end original

もし、あるハンドルから来る全てのデータが正確に同じ方法で
エンコードされているなら、C<encoding> 層を使って、 PerlIO システムに自動的に
全てをデコードするように伝えることができます。
これを行えば、この層のハンドルを使っている限り、うっかりデコードや
エンコードを忘れることはありません。

=begin original

You can provide this layer when C<open>ing the file:

=end original

ファイルを C<open> するときにこの層を指定することができます:

  open my $fh, '>:encoding(UTF-8)', $filename;  # auto encoding on write
  open my $fh, '<:encoding(UTF-8)', $filename;  # auto decoding on read

=begin original

Or if you already have an open filehandle:

=end original

あるいは既にオープンしているファイルハンドルがあるなら:

  binmode $fh, ':encoding(UTF-8)';

=begin original

Some database drivers for DBI can also automatically encode and decode, but
that is sometimes limited to the UTF-8 encoding.

=end original

DBI のデータベースドライバのいくつかも、エンコードとデコードを自動的に
行いますが、ときどきこれは UTF-8 エンコーディングに制限されています。

=head2 What if I don't know which encoding was used?

(どのエンコーディングが使われているかわからないときは?)

=begin original

Do whatever you can to find out, and if you have to: guess. (Don't forget to
document your guess with a comment.)

=end original

なんとかして見つけるか、もし必要なら、推測してください。
(どう推測したかをコメントとして文書化するのを忘れないでください。)

=begin original

You could open the document in a web browser, and change the character set or
character encoding until you can visually confirm that all characters look the
way they should.

=end original

ドキュメントを web ブラウザで開いて、全ての文字があるべき形であることを
視覚的に確認できるまで文字集合や文字エンコーディングを変更する方法も
あります。

=begin original

There is no way to reliably detect the encoding automatically, so if people
keep sending you data without charset indication, you may have to educate them.

=end original

エンコーディングを自動的に検出するための信頼性のある方法はないので、
もし人々があなたに文字集合の指示なしにデータを送り続けるなら、彼らを
教育する必要があるかもしれません。

=head2 Can I use Unicode in my Perl sources?

(Perl のソースコードに Unicode は使える?)

=begin original

Yes, you can! If your sources are UTF-8 encoded, you can indicate that with the
C<use utf8> pragma.

=end original

はい、できます!
ソースコードが UTF-8 でエンコードされているなら、C<use utf8> プラグマを
使ってそれを示すことができます。

    use utf8;

=begin original

This doesn't do anything to your input, or to your output. It only influences
the way your sources are read. You can use Unicode in string literals, in
identifiers (but they still have to be "word characters" according to C<\w>),
and even in custom delimiters.

=end original

これは入出力に対しては何も行いません。
ソースを読み込む方法のみに影響を与えます。
文字列リテラル、識別子(しかし C<\w> に従った「単語文字」である必要が
あります)、そして独自デリミタにすら Unicode が使えます。

=head2 Data::Dumper doesn't restore the UTF8 flag; is it broken?

(Data::Dumper は UTF8 フラグを復元しません; これは壊れてるの?)

=begin original

No, Data::Dumper's Unicode abilities are as they should be. There have been
some complaints that it should restore the UTF8 flag when the data is read
again with C<eval>. However, you should really not look at the flag, and
nothing indicates that Data::Dumper should break this rule.

=end original

いいえ、Data::Dumper の Unicode 能力は、あるべき形であります。
C<eval> で再びデータを読み込むとき、UTF8 フラグを復元するべきだという
苦情が来ることがあります。
しかし、実際にはフラグを見るべきではないですし、Data::Dumper がこの規則を
破っていることを示すものは何もありません。

=begin original

Here's what happens: when Perl reads in a string literal, it sticks to 8 bit
encoding as long as it can. (But perhaps originally it was internally encoded
as UTF-8, when you dumped it.) When it has to give that up because other
characters are added to the text string, it silently upgrades the string to
UTF-8. 

=end original

起きているのは以下のようなことです: Perl が文字列リテラルを読み込むとき、
可能な限り長く 8 ビットエンコーディングにこだわります。
(しかしおそらく、これをダンプしたときには内部では UTF-8 でエンコード
されていました。)
それ以外の文字をテキスト文字列に追加するためにこれを諦めなければならない
とき、Perl は暗黙のうちに文字列を UTF-8 に昇格させます。

=begin original

If you properly encode your strings for output, none of this is of your
concern, and you can just C<eval> dumped data as always.

=end original

出力用の文字列を適切にエンコードしていれば、これについてあなたは何も
心配することはなく、いつも通りにダンプしたデータを C<eval> できます。

=head2 Why do regex character classes sometimes match only in the ASCII range?

(なぜ正規表現文字クラスは時々 ASCII の範囲にしかマッチしないの?)

=begin original

Starting in Perl 5.14 (and partially in Perl 5.12), just put a
C<use feature 'unicode_strings'> near the beginning of your program.
Within its lexical scope you shouldn't have this problem.  It also is
automatically enabled under C<use feature ':5.12'> or C<use v5.12> or
using C<-E> on the command line for Perl 5.12 or higher.

=end original

Perl 5.14 から (そして部分的に Perl 5.12 から、) 単にプログラムの先頭付近に
C<use feature 'unicode_strings'> を書いてください。
このレキシカルスコープ内ではこの問題は発生しないはずです。
これはまた C<use feature ':5.12'> または C<use v5.12> が有効か、Perl 5.12
以降でコマンドラインで C<-E> を使っていると自動的に有効になります。

=begin original

The rationale for requiring this is to not break older programs that
rely on the way things worked before Unicode came along.  Those older
programs knew only about the ASCII character set, and so may not work
properly for additional characters.  When a string is encoded in UTF-8,
Perl assumes that the program is prepared to deal with Unicode, but when
the string isn't, Perl assumes that only ASCII
is wanted, and so those characters that are not ASCII
characters aren't recognized as to what they would be in Unicode.
C<use feature 'unicode_strings'> tells Perl to treat all characters as
Unicode, whether the string is encoded in UTF-8 or not, thus avoiding
the problem.

=end original

これが必要な理論的根拠は、Unicode がやってくる前に動作する方法に
依存している古いプログラムを壊さないことです。
このような古いプログラムは ASCII 文字集合のみを知っているので、追加の
文字については正しく動作しないかも知れません。
Perl はプログラムが Unicode を扱えるように準備されていると仮定しますが、
文字列がそうでなかった場合、Perl は (EBCDIC プラットフォームでなければ)
ASCII のみが求められていると仮定するので、非 ASCII 文字は Unicode に
するべきものとして認識しません。
C<use feature 'unicode_strings'> は Perl に、文字が UTF-8 で
エンコードされているかどうかにかかわらず全ての文字を Unicode として
扱うように知らせて、この問題を回避します。

=begin original

However, on earlier Perls, or if you pass strings to subroutines outside
the feature's scope, you can force Unicode rules by changing the
encoding to UTF-8 by doing C<utf8::upgrade($string)>. This can be used
safely on any string, as it checks and does not change strings that have
already been upgraded.

=end original

しかし、以前の Perl であったり、この機能のスコープの外側のサブルーチンに
文字列を渡した場合、C<utf8::upgrade($string)> とすることでエンコーディングを
UTF-8 にすることで Unicode の規則を強制できます。
これは既に昇格している文字列は変更しないので、どのような文字列に対しても
安全に用いることができます。

=begin original

For a more detailed discussion, see L<Unicode::Semantics> on CPAN.

=end original

さらなる詳細な議論については、CPAN の L<Unicode::Semantics> を
参照してください。

=head2 Why do some characters not uppercase or lowercase correctly?

(なぜいくつかの文字は正しく大文字や小文字にならないの?)

=begin original

See the answer to the previous question.

=end original

前述の質問の答えを参照してください。

=head2 How can I determine if a string is a text string or a binary string?

(文字列がテキスト文字列かバイナリ文字列かを決定するには?)

=begin original

You can't. Some use the UTF8 flag for this, but that's misuse, and makes well
behaved modules like Data::Dumper look bad. The flag is useless for this
purpose, because it's off when an 8 bit encoding (by default ISO-8859-1) is
used to store the string.

=end original

それはできません。
このために UTF8 フラグを使う人もいますが、これは誤用で、Data::Dumper のように
正しく振る舞うモジュールをおかしくします。
このフラグはこの目的のためには使えません; なぜなら文字列の保管に 8 ビット
エンコーディングが使われている場合 (デフォルトでは ISO-8859-1 です)、
オフだからです。

=begin original

This is something you, the programmer, has to keep track of; sorry. You could
consider adopting a kind of "Hungarian notation" to help with this.

=end original

把握しておく必要があるプログラマに言えることはこれです; ごめんなさい。
これを助けるために、「ハンガリアン記法」のようなものの採用を
検討することもできます。

=head2 How do I convert from encoding FOO to encoding BAR?

(エンコーディング FOO から エンコーディング BAR に変換するには?)

=begin original

By first converting the FOO-encoded byte string to a text string, and then the
text string to a BAR-encoded byte string:

=end original

まず FOO でエンコードされたバイト文字列をテキスト文字列に変化し、
それからテキスト文字列を BAR エンコードされたバイト文字列に変換します:

    my $text_string = decode('FOO', $foo_string);
    my $bar_string  = encode('BAR', $text_string);

=begin original

or by skipping the text string part, and going directly from one binary
encoding to the other:

=end original

あるいは、テキスト文字列の部分を飛ばして、あるバイナリエンコーディングから
他のものへ直接変換します:

    use Encode qw(from_to);
    from_to($string, 'FOO', 'BAR');  # changes contents of $string

=begin original

or by letting automatic decoding and encoding do all the work:

=end original

あるいは、自動でデコードとエンコードをさせることで全ての作業を行います:

    open my $foofh, '<:encoding(FOO)', 'example.foo.txt';
    open my $barfh, '>:encoding(BAR)', 'example.bar.txt';
    print { $barfh } $_ while <$foofh>;

=head2 What are C<decode_utf8> and C<encode_utf8>?

(C<decode_utf8> と C<encode_utf8> って何?)

=begin original

These are alternate syntaxes for C<decode('utf8', ...)> and C<encode('utf8',
...)>. Do not use these functions for data exchange. Instead use
C<decode('UTF-8', ...)> and C<encode('UTF-8', ...)>; see
L</What's the difference between UTF-8 and utf8?> below.

=end original

これらは C<decode('utf8', ...)> および C<encode('utf8', ...)> のもう一つの
文法です。
これらの関数をデータ交換に使わないでください。
代わりに C<decode('UTF-8', ...)> と C<encode('UTF-8', ...)> を使ってください;
後述する L</What's the difference between UTF-8 and utf8?> を
参照してください。

=head2 What is a "wide character"?

(「ワイド文字」って何?)

=begin original

This is a term used for characters occupying more than one byte.

=end original

これは、1 バイトで収まらない文字という意味で使われる用語です。

=begin original

The Perl warning "Wide character in ..." is caused by such a character.
With no specified encoding layer, Perl tries to
fit things into a single byte.  When it can't, it
emits this warning (if warnings are enabled), and uses UTF-8 encoded data
instead.

=end original

Perl の警告 "Wide character in ..." はそのような文字によって引き起こされます。
エンコーディング層が指定されていない場合、Perl はそれを単一のバイトに
納めようとします。
これができないと、(警告が有効なら)この警告が出力され、代わりに UTF-8 で
エンコードされたデータを使います。

=begin original

To avoid this warning and to avoid having different output encodings in a single
stream, always specify an encoding explicitly, for example with a PerlIO layer:

=end original

この警告を回避し、一つのストリームに異なった出力エンコーディングが
出力されることを回避するには、常に明示的にエンコーディングを指定してください;
例えば PerlIO 層を使って:

    binmode STDOUT, ":encoding(UTF-8)";

=head1 INTERNALS

(内部構造)

=head2 What is "the UTF8 flag"?

(「UTF8 フラグ」って何?)

=begin original

Please, unless you're hacking the internals, or debugging weirdness, don't
think about the UTF8 flag at all. That means that you very probably shouldn't
use C<is_utf8>, C<_utf8_on> or C<_utf8_off> at all.

=end original

内部をハックしようとしているか、変なものをデバッグしようとしているのでない
限り、どうか UTF8 フラグのことは一切考えないでください。
これは、まず間違いなく C<is_utf8>, C<_utf8_on>, C<_utf8_off> を
一切使うべきでないことを意味します。

=begin original

The UTF8 flag, also called SvUTF8, is an internal flag that indicates that the
current internal representation is UTF-8. Without the flag, it is assumed to be
ISO-8859-1. Perl converts between these automatically.  (Actually Perl usually
assumes the representation is ASCII; see L</Why do regex character classes
sometimes match only in the ASCII range?> above.)

=end original

UTF8 フラグ(SvUTF8 とも呼ばれます)は、現在の内部表現が UTF-8 であることを
示す内部フラグです。
このフラグがない場合、ISO-8859-1 と仮定します。
Perl はこれらを自動的に変換します。
(実際のところ Perl は普通表現が ASCII であると仮定します; 上述の L</Why do
regex character classes sometimes match only in the ASCII range?> を
参照してください。)

=begin original

One of Perl's internal formats happens to be UTF-8. Unfortunately, Perl can't
keep a secret, so everyone knows about this. That is the source of much
confusion. It's better to pretend that the internal format is some unknown
encoding, and that you always have to encode and decode explicitly.

=end original

Perl の内部表現の一つはたまたま UTF-8 です。
残念ながら、Perl は秘密を守れないので、このことはみんな知っています。
これが多くの混乱の源です。
内部表現は何か分からないエンコーディングで、常に明示的にエンコードと
デコードが必要ということにしておいた方がよいです。

=head2 What about the C<use bytes> pragma?

(C<use bytes> プラグマって何?)

=begin original

Don't use it. It makes no sense to deal with bytes in a text string, and it
makes no sense to deal with characters in a byte string. Do the proper
conversions (by decoding/encoding), and things will work out well: you get
character counts for decoded data, and byte counts for encoded data.

=end original

これは使わないでください。
テキスト文字列をバイト単位で扱うことに意味はありませんし、
バイト文字列を文字単位で扱うことには意味はありません。
適切な変換(デコードかエンコード)を行えば、物事はうまくいきます:
デコードしたデータの文字数を得られますし、エンコードしたデータのバイト数を
得られます。

=begin original

C<use bytes> is usually a failed attempt to do something useful. Just forget
about it.

=end original

C<use bytes> は何か有用なことをしようとするためには間違った方法です。
これのことは単に忘れてください。

=head2 What about the C<use encoding> pragma?

(C<use encoding> プラグマって何?)

=begin original

Don't use it. Unfortunately, it assumes that the programmer's environment and
that of the user will use the same encoding. It will use the same encoding for
the source code and for STDIN and STDOUT. When a program is copied to another
machine, the source code does not change, but the STDIO environment might.

=end original

これは使わないでください。
残念ながら、これはプログラマの環境とユーザーの環境が同じであると仮定します。
これはソースコードと STDIN や STDOUT で同じエンコーディングを使います。
プログラムが他のマシンにコピーされると、ソースコードは変わりませんが、
STDIO 環境は変わるかもしれません。

=begin original

If you need non-ASCII characters in your source code, make it a UTF-8 encoded
file and C<use utf8>.

=end original

もしソースコードに非 ASCII 文字が必要なら、ファイルを UTF-8 で
エンコードして、C<use utf8> を使ってください。

=begin original

If you need to set the encoding for STDIN, STDOUT, and STDERR, for example
based on the user's locale, C<use open>.

=end original

もし STDIN, STDOUT, STDERR のエンコーディングを、例えばユーザーのロケールに
合わせてセットする必要があるなら、C<use open> してください。

=head2 What is the difference between C<:encoding> and C<:utf8>?

(C<:encoding> と C<:utf8> の違いは?)

=begin original

Because UTF-8 is one of Perl's internal formats, you can often just skip the
encoding or decoding step, and manipulate the UTF8 flag directly.

=end original

UTF-8 は Perl の内部形式のひとつなので、しばしばエンコードやデコードの
手順を省略して、UTF8 フラグを直接操作できます。

=begin original

Instead of C<:encoding(UTF-8)>, you can simply use C<:utf8>, which skips the
encoding step if the data was already represented as UTF8 internally. This is
widely accepted as good behavior when you're writing, but it can be dangerous
when reading, because it causes internal inconsistency when you have invalid
byte sequences. Using C<:utf8> for input can sometimes result in security
breaches, so please use C<:encoding(UTF-8)> instead.

=end original

C<:encoding(UTF-8)> の代わりに単に C<:utf8> を使うことで、もしデータが
内部で既に UTF8 で表現されていれば、エンコードの手順を省略します。
これは、書き込むときにはよい振る舞いであると広く受け入れられていますが、
読み込むときには危険があります; なぜなら不正なバイト列を受け取ると
内部矛盾を引き起こすからです。
入力に C<:utf8> を使うとセキュリティ侵害を引き起こす可能性があるので、
どうか代わりに C<:encoding(UTF-8)> を使ってください。

=begin original

Instead of C<decode> and C<encode>, you could use C<_utf8_on> and C<_utf8_off>,
but this is considered bad style. Especially C<_utf8_on> can be dangerous, for
the same reason that C<:utf8> can.

=end original

C<decode> と C<encode> の代わりに、C<_utf8_on> と C<_utf8_off> を
使えますが、これは悪いスタイルと考えられています。
特に C<_utf8_on> は、C<:utf8> と同じ理由で危険です。

=begin original

There are some shortcuts for oneliners;
see L<-C in perlrun|perlrun/-C [numberE<sol>list]>.

=end original

一行野郎のための省略形があります; L<perlrun> の
L<-C in perlrun|perlrun/-C [numberE<sol>list]> を参照してください。

=head2 What's the difference between C<UTF-8> and C<utf8>?

(C<UTF-8> と C<utf8> の違いは?)

=begin original

C<UTF-8> is the official standard. C<utf8> is Perl's way of being liberal in
what it accepts. If you have to communicate with things that aren't so liberal,
you may want to consider using C<UTF-8>. If you have to communicate with things
that are too liberal, you may have to use C<utf8>. The full explanation is in
L<Encode/"UTF-8 vs. utf8 vs. UTF8">.

=end original

C<UTF-8> は公式な標準です。
C<utf8> は、何を受け入れるかに関して自由な Perl のやり方です。
もしそれほど自由でないものと対話する必要があるなら、
C<UTF-8> を使うことを考えたくなるかもしれません。
自由すぎるものと対話する必要があるなら、C<utf8> を
使わなければならないかもしれません。
完全な説明は L<Encode/"UTF-8 vs. utf8 vs. UTF8"> にあります。

=begin original

C<UTF-8> is internally known as C<utf-8-strict>. The tutorial uses UTF-8
consistently, even where utf8 is actually used internally, because the
distinction can be hard to make, and is mostly irrelevant.

=end original

C<UTF-8> は内部では C<utf-8-strict> として知られます。
チュートリアルでは、たとえ内部では実際には utf8 が使われる場合でも
一貫して UTF-8 を使っています; なぜなら区別をつけるのは難しく、ほとんど
無意味だからです。

=begin original

For example, utf8 can be used for code points that don't exist in Unicode, like
9999999, but if you encode that to UTF-8, you get a substitution character (by
default; see L<Encode/"Handling Malformed Data"> for more ways of dealing with
this.)

=end original

例えば utf8 は、9999999 のような、Unicode に存在しない符号位置も使えますが、
これを UTF-8 でエンコードすると、代替文字を得ることになります(これは
デフォルトの場合です; これを扱う他の方法については
L<Encode/"Handling Malformed Data"> を参照してください。)

=begin original

Okay, if you insist: the "internal format" is utf8, not UTF-8. (When it's not
some other encoding.)

=end original

わかりました、どうしてもと言うのなら:「内部形式」は utf8 であって、
UTF-8 ではありません。
(もしその他のエンコーディングでないのなら。)

=head2 I lost track; what encoding is the internal format really?

(迷子になりました; 実際のところ内部形式のエンコーディングは何?)

=begin original

It's good that you lost track, because you shouldn't depend on the internal
format being any specific encoding. But since you asked: by default, the
internal format is either ISO-8859-1 (latin-1), or utf8, depending on the
history of the string. On EBCDIC platforms, this may be different even.

=end original

迷子になったのはよいことです; なぜなら内部形式が特定のエンコーディングで
あることに依存するべきではないからです。
しかし聞かれたので答えましょう: デフォルトでは、内部形式は
ISO-8859-1 (latin-1) か utf8 で、どちらになるかは文字列の歴史に
依存します。
EBCDIC プラットフォームでは、これは異なっているかもしれません。

=begin original

Perl knows how it stored the string internally, and will use that knowledge
when you C<encode>. In other words: don't try to find out what the internal
encoding for a certain string is, but instead just encode it into the encoding
that you want.

=end original

Perl は文字列が内部でどのように保管されているかを知っていて、この知識を
C<エンコードする> ときに使います。
言い換えると: 特定の文字列の内部エンコーディングが何かを
調べようとしてはいけません; 代わりに、単に望みのエンコーディングに
エンコードしてください。

=head1 AUTHOR

Juerd Waalboer <#####@juerd.nl>

=head1 SEE ALSO

L<perlunicode>, L<perluniintro>, L<Encode>

=begin meta

Translate: SHIRAKATA Kentaro <argrath@ub32.org> (5.10.0-)
Status: completed

=end meta

