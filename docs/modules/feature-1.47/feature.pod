
=encoding euc-jp

=head1 NAME

=begin original

feature - Perl pragma to enable new features

=end original

feature - 新しい機能を有効にするプラグマ

=head1 SYNOPSIS

    use feature qw(say switch);
    given ($foo) {
        when (1)          { say "\$foo == 1" }
        when ([2,3])      { say "\$foo == 2 || \$foo == 3" }
        when (/^a[bc]d$/) { say "\$foo eq 'abd' || \$foo eq 'acd'" }
        when ($_ > 100)   { say "\$foo > 100" }
        default           { say "None of the above" }
    }

    use feature ':5.10'; # loads all features available in perl 5.10

    use v5.10;           # implicitly loads :5.10 feature bundle

=head1 DESCRIPTION

=begin original

It is usually impossible to add new syntax to Perl without breaking
some existing programs.  This pragma provides a way to minimize that
risk. New syntactic constructs, or new semantic meanings to older
constructs, can be enabled by C<use feature 'foo'>, and will be parsed
only when the appropriate feature pragma is in scope.  (Nevertheless, the
C<CORE::> prefix provides access to all Perl keywords, regardless of this
pragma.)

=end original

既に存在しているプログラムを壊すことなく、Perl に新しい文法を追加することは、
普通は不可能です。
このプラグマは、リスクを最小化する方法を提供します。
新しい文法構造や、古い構造の新しい意味は、C<use feature 'foo'> で有効化され、
適切な feature プラグマがスコープ内にある場合にのみパースされます。
(それでも、このプラグマに関わらず、C<CORE::> 接頭辞は全ての
Perl キーワードへのアクセスを提供します。)

=head2 Lexical effect

(レキシカルな効果)

=begin original

Like other pragmas (C<use strict>, for example), features have a lexical
effect.  C<use feature qw(foo)> will only make the feature "foo" available
from that point to the end of the enclosing block.

=end original

(例えば C<use strict> のような) その他のプラグマと同様、feature は
レキシカルな効果を持ちます。
C<use feature qw(foo)> は、この地点からブロックの終わりまでの間だけ、
"foo" 機能を利用可能にします。

    {
        use feature 'say';
        say "say is available here";
    }
    print "But not here.\n";

=head2 C<no feature>

=begin original

Features can also be turned off by using C<no feature "foo">.  This too
has lexical effect.

=end original

機能は C<no feature "foo"> を使うことで無効にすることも出来ます。
これもまたレキシカルな効果を持ちます。

    use feature 'say';
    say "say is available here";
    {
        no feature 'say';
        print "But not here.\n";
    }
    say "Yet it is here.";

=begin original

C<no feature> with no features specified will reset to the default group.  To
disable I<all> features (an unusual request!) use C<no feature ':all'>.

=end original

C<no feature> と、機能を指定せずに使うと、デフォルトグループにリセットします。
I<全ての> 機能を無効にする(普通でない要求!)には、C<no feature ':all'> を
使ってください。

=head1 AVAILABLE FEATURES

(利用可能な機能)

=head2 The 'say' feature

('say' 機能)

=begin original

C<use feature 'say'> tells the compiler to enable the Perl 6 style
C<say> function.

=end original

C<use feature 'say'> は、コンパイラに Perl 6 形式の C<say> 関数を
有効にするように伝えます。

=begin original

See L<perlfunc/say> for details.

=end original

詳しくは L<perlfunc/say> を参照してください。

=begin original

This feature is available starting with Perl 5.10.

=end original

この機能は Perl 5.10 から利用可能です。

=head2 The 'state' feature

('state' 機能)

=begin original

C<use feature 'state'> tells the compiler to enable C<state>
variables.

=end original

C<use feature 'state'> は、コンパイラに C<state> 変数を有効にするように
伝えます。

=begin original

See L<perlsub/"Persistent Private Variables"> for details.

=end original

詳しくは L<perlsub/"Persistent Private Variables"> を参照してください。

=begin original

This feature is available starting with Perl 5.10.

=end original

この機能は Perl 5.10 から利用可能です。

=head2 The 'switch' feature

('switch' 機能)

=begin original

B<WARNING>: Because the L<smartmatch operator|perlop/"Smartmatch Operator"> is
experimental, Perl will warn when you use this feature, unless you have
explicitly disabled the warning:

=end original

B<WARNING>: L<スマートマッチング演算子|perlop/"Smartmatch Operator"> は
実験的なので、この機能を使うと、明示的に無効にしない限り警告が発生します:

    no warnings "experimental::smartmatch";

=begin original

C<use feature 'switch'> tells the compiler to enable the Perl 6
given/when construct.

=end original

C<use feature 'switch'> は、コンパイラに Perl 6 given/when 構文を
有効にするように伝えます。

=begin original

See L<perlsyn/"Switch Statements"> for details.

=end original

詳しくは L<perlsyn/"Switch Statements"> を参照してください。

=begin original

This feature is available starting with Perl 5.10.

=end original

この機能は Perl 5.10 から利用可能です。

=head2 The 'unicode_strings' feature

('unicode_strings' 機能)

=begin original

C<use feature 'unicode_strings'> tells the compiler to use Unicode rules
in all string operations executed within its scope (unless they are also
within the scope of either C<use locale> or C<use bytes>).  The same applies
to all regular expressions compiled within the scope, even if executed outside
it.  It does not change the internal representation of strings, but only how
they are interpreted.

=end original

C<use feature 'unicode_strings'> は、(C<use locale> か C<use bytes> の
スコープないでない限り) そのスコープ内で実行される全ての文字列操作に
Unicode の規則を使うようにコンパイラに伝えます。
これは文字列の内部表現は変更しません; それをどう解釈するかだけです。

=begin original

C<no feature 'unicode_strings'> tells the compiler to use the traditional
Perl rules wherein the native character set rules is used unless it is
clear to Perl that Unicode is desired.  This can lead to some surprises
when the behavior suddenly changes.  (See
L<perlunicode/The "Unicode Bug"> for details.)  For this reason, if you are
potentially using Unicode in your program, the
C<use feature 'unicode_strings'> subpragma is B<strongly> recommended.

=end original

C<no feature 'unicode_strings'> は、Unicode が求められているのが
Perl にとって明らかでない限り、ネイティブな文字集合規則が使われるところで
伝統的な Perl の規則を使うようにコンパイラに伝えます。
これは、振る舞いが突然変更されたときに驚きを引き起こすかもしれません。
(詳しくは L<perlunicode/The "Unicode Bug"> を参照してください。)
この理由により、もしプログラムで Unicode を扱う可能性があるなら、
C<use feature 'unicode_strings'> 副プラグマを B<強く> 勧めます。

=begin original

This feature is available starting with Perl 5.12; was almost fully
implemented in Perl 5.14; and extended in Perl 5.16 to cover C<quotemeta>;
and extended further in Perl 5.26 to cover L<the range
operator|perlop/Range Operators>.

=end original

この機能は Perl 5.12 から利用可能になりました; Perl 5.14 でほぼ完全に
実装されました; Perl 5.16 で C<quotemeta> に対応するように拡張されました;
そして Perl 5.26 では
L<範囲演算子|perlop/Range Operators> に対応するようにさらに拡張されました。

=head2 The 'unicode_eval' and 'evalbytes' features

('unicode_eval' と 'evalbytes' 機能)

=begin original

Together, these two features are intended to replace the legacy string
C<eval> function, which behaves problematically in some instances.  They are
available starting with Perl 5.16, and are enabled by default by a
S<C<use 5.16>> or higher declaration.

=end original

これら二つの機能は共に、古い文字列 C<eval> 関数を置き換えることを
目的としています; これはいくつかの状況で問題のある振る舞いをします。
これらは Perl 5.16 から利用可能で、
S<C<use 5.16>> またはそれ以上の宣言により、デフォルトで有効になります。

=begin original

C<unicode_eval> changes the behavior of plain string C<eval> to work more
consistently, especially in the Unicode world.  Certain (mis)behaviors
couldn't be changed without breaking some things that had come to rely on
them, so the feature can be enabled and disabled.  Details are at
L<perlfunc/Under the "unicode_eval" feature>.

=end original

C<unicode_eval> は、特に Unicode の世界で、より一貫性のある動作をするように、
単なる文字列の C<eval> の振る舞いを変更します。
いくつかの(間違った)振る舞いは、これに依存しているものを
壊さずに変更することができないので、
この機能は有効にしたり無効にしたりできます。
詳細は L<perlfunc/Under the "unicode_eval" feature> にあります。

=begin original

C<evalbytes> is like string C<eval>, but operating on a byte stream that is
not UTF-8 encoded.  Details are at L<perlfunc/evalbytes EXPR>.  Without a
S<C<use feature 'evalbytes'>> nor a S<C<use v5.16>> (or higher) declaration in
the current scope, you can still access it by instead writing
C<CORE::evalbytes>.

=end original

C<evalbytes> は文字列 C<eval> に似ていますが、
UTF-8 エンコードされていないバイト列を操作します。
詳細は L<perlfunc/evalbytes EXPR> にあります。
現在のスコープに S<C<use feature 'evalbytes'>> や
S<C<use v5.16>> (またはそれ以上) の宣言がない場合でも、
C<CORE::evalbytes> と書くことでこれにアクセスできます。

=head2 The 'current_sub' feature

('current_sub' 機能)

=begin original

This provides the C<__SUB__> token that returns a reference to the current
subroutine or C<undef> outside of a subroutine.

=end original

これは C<__SUB__> トークンを提供します; これは現在のサブルーチンへの
リファレンスか、サブルーチンの外側では C<undef> を返します。

=begin original

This feature is available starting with Perl 5.16.

=end original

この機能は Perl 5.16 から利用可能です。

=head2 The 'array_base' feature

('array_base' 機能)

=begin original

This feature supports the legacy C<$[> variable.  See L<perlvar/$[> and
L<arybase>.  It is on by default but disabled under C<use v5.16> (see
L</IMPLICIT LOADING>, below).

=end original

この機能はレガシーな C<$[> 変数に対応します。
L<perlvar/$[> と L<arybase> を参照してください。
これはデフォルトではオンですが C<use v5.16> (後述の
L</IMPLICIT LOADING> 参照) の基では無効になります。

=begin original

This feature is available under this name starting with Perl 5.16.  In
previous versions, it was simply on all the time, and this pragma knew
nothing about it.

=end original

この機能は Perl 5.16 からこの名前で利用可能です。
以前のバージョンでは、単に常時適用されていて、このプラグマはこれについて
何も知りませんでした。

=head2 The 'fc' feature

('fc' 機能)

=begin original

C<use feature 'fc'> tells the compiler to enable the C<fc> function,
which implements Unicode casefolding.

=end original

C<use feature 'fc'> は、Unicode 畳み込みを実装した C<fc> 関数を
有効にするようにコンパイラに伝えます。

=begin original

See L<perlfunc/fc> for details.

=end original

詳しくは L<perlfunc/fc> を参照してください。

=begin original

This feature is available from Perl 5.16 onwards.

=end original

この機能は Perl 5.16 から利用可能です。

=head2 The 'lexical_subs' feature

('lexical_subs' 機能)

=begin original

In Perl versions prior to 5.26, this feature enabled
declaration of subroutines via C<my sub foo>, C<state sub foo>
and C<our sub foo> syntax.  See L<perlsub/Lexical Subroutines> for details.

=end original

Perl バージョンが 5.26 より前の場合、これは
C<my sub foo>, C<state sub foo>, C<our sub foo> 文法による
サブルーチンの定義を有効にします。
詳しくは L<perlsub/Lexical Subroutines> を参照してください。

=begin original

This feature is available from Perl 5.18 onwards.  From Perl 5.18 to 5.24,
it was classed as experimental, and Perl emitted a warning for its
usage, except when explicitly disabled:

=end original

この機能は Perl 5.18 から利用可能です。
Perl 5.18 から 5.24 では、これは実験的と位置づけられていて、
明示的に無効にしない限り Perl は警告を出力していました:

  no warnings "experimental::lexical_subs";

=begin original

As of Perl 5.26, use of this feature no longer triggers a warning, though
the C<experimental::lexical_subs> warning category still exists (for
compatibility with code that disables it).  In addition, this syntax is
not only no longer experimental, but it is enabled for all Perl code,
regardless of what feature declarations are in scope.

=end original

Perl 5.24 から、この機能の使用はもはや警告を出力しなくなりましたが、
C<experimental::lexical_subs> 警告カテゴリは(これを無効にするコードとの
互換性のために)存在するままです。
さらにｌ、この文法はもはや実験的ではないだけでなく、
どんな機能宣言がスコープ内にあるかに関わらず、
全ての Perl コードで有効です。

=head2 The 'postderef' and 'postderef_qq' features

('postderef' と 'postderef_qq' 機能)

=begin original

The 'postderef_qq' feature extends the applicability of L<postfix
dereference syntax|perlref/Postfix Dereference Syntax> so that postfix array
and scalar dereference are available in double-quotish interpolations. For
example, it makes the following two statements equivalent:

=end original

'postderef_qq' 機能は、
L<後置デリファレンス文法|perlref/Postfix Dereference Syntax> の機能を、
後置配列と後置スカラのデリファレンスがダブルクォート風変数展開で
利用可能になるように拡張します。
例えば、次の二つの文が等価になります:

  my $s = "[@{ $h->{a} }]";
  my $s = "[$h->{a}->@*]";

=begin original

This feature is available from Perl 5.20 onwards. In Perl 5.20 and 5.22, it
was classed as experimental, and Perl emitted a warning for its
usage, except when explicitly disabled:

=end original

この機能は Perl 5.20 から利用可能です。
Perl 5.20 と 5.22 では、これは実験的と位置づけられていて、
明示的に無効にしない限り Perl は警告を出力していました:

  no warnings "experimental::postderef";

=begin original

As of Perl 5.24, use of this feature no longer triggers a warning, though
the C<experimental::postderef> warning category still exists (for
compatibility with code that disables it).

=end original

Perl 5.24 から、この機能の使用はもはや警告を出力しなくなりましたが、
C<experimental::postderef> 警告カテゴリは(これを無効にするコードとの
互換性のために)存在するままです。

=begin original

The 'postderef' feature was used in Perl 5.20 and Perl 5.22 to enable
postfix dereference syntax outside double-quotish interpolations. In those
versions, using it triggered the C<experimental::postderef> warning in the
same way as the 'postderef_qq' feature did. As of Perl 5.24, this syntax is
not only no longer experimental, but it is enabled for all Perl code,
regardless of what feature declarations are in scope.

=end original

'postderef' 機能は、ダブルクォート風変数展開の外側での
後置デリファレンス文法を有効にするために Perl 5.20 から Perl 5.22 で
使われていました。
これらのバージョンでは、'postderef_qq' 機能と同様に、これを使うと
C<experimental::postderef> 警告を引き起こします。
Perl 5.24 から、この文法はもはや実験的ではなくなっただけではなく、
スコープ中でどんな機能が宣言されているかに関わらず、全ての Perl コードで
有効になりました。

=head2 The 'signatures' feature

('signatures' 機能)

=begin original

B<WARNING>: This feature is still experimental and the implementation may
change in future versions of Perl.  For this reason, Perl will
warn when you use the feature, unless you have explicitly disabled the
warning:

=end original

B<警告>: この機能はまだ実験的で、実装は将来のバージョンの Perl で
変わるかもしれません。
このため、この機能を使うと、明示的に無効にしない限り警告が発生します:

    no warnings "experimental::signatures";

=begin original

This enables unpacking of subroutine arguments into lexical variables
by syntax such as

=end original

これは、次のような文法によってサブルーチンの引数をレキシカル変数に
展開できるようにします:

    sub foo ($left, $right) {
	return $left + $right;
    }

=begin original

See L<perlsub/Signatures> for details.

=end original

詳しくは L<perlsub/Signatures> を参照してください。

=begin original

This feature is available from Perl 5.20 onwards.

=end original

この機能は Perl 5.20 から利用可能です。

=head2 The 'refaliasing' feature

('refaliasing' 機能)

=begin original

B<WARNING>: This feature is still experimental and the implementation may
change in future versions of Perl.  For this reason, Perl will
warn when you use the feature, unless you have explicitly disabled the
warning:

=end original

B<警告>: この機能はまだ実験的で、実装は将来のバージョンの Perl で
変わるかもしれません。
このため、この機能を使うと、明示的に無効にしない限り警告が発生します:

    no warnings "experimental::refaliasing";

=begin original

This enables aliasing via assignment to references:

=end original

これはリファレンスへの代入による別名化を有効にします:

    \$a = \$b; # $a and $b now point to the same scalar
    \@a = \@b; #                     to the same array
    \%a = \%b;
    \&a = \&b;
    foreach \%hash (@array_of_hash_refs) {
        ...
    }

=begin original

See L<perlref/Assigning to References> for details.

=end original

詳しくは L<perlref/Assigning to References> を参照してください。

=begin original

This feature is available from Perl 5.22 onwards.

=end original

この機能は Perl 5.22 から利用可能です。

=head2 The 'bitwise' feature

('bitwise' 機能)

=begin original

B<WARNING>: This feature is still experimental and the implementation may
change in future versions of Perl.  For this reason, Perl will
warn when you use the feature, unless you have explicitly disabled the
warning:

=end original

B<警告>: この機能はまだ実験的で、実装は将来のバージョンの Perl で
変わるかもしれません。
このため、この機能を使うと、明示的に無効にしない限り警告が発生します:

    no warnings "experimental::bitwise";

=begin original

This makes the four standard bitwise operators (C<& | ^ ~>) treat their
operands consistently as numbers, and introduces four new dotted operators
(C<&. |. ^. ~.>) that treat their operands consistently as strings.  The
same applies to the assignment variants (C<&= |= ^= &.= |.= ^.=>).

=end original

これは四つの標準ビット単位演算子 (C<& | ^ ~>) がそのオペランドを
数値として一貫して扱うようになり、
オペランドを一貫して文字列として扱う新しいドット付き演算子
(C<&. |. ^. ~.>) を導入します。
同じものは代入の亜種 (C<&= |= ^= &.= |.= ^.=>) にも適用されます。

=begin original

See L<perlop/Bitwise String Operators> for details.

=end original

詳しくは L<perlop/Bitwise String Operators> を参照してください。

=begin original

This feature is available from Perl 5.22 onwards.

=end original

この機能は Perl 5.22 から利用可能です。

=head2 The 'declared_refs' feature

('declared_refs' 機能)

=begin original

B<WARNING>: This feature is still experimental and the implementation may
change in future versions of Perl.  For this reason, Perl will
warn when you use the feature, unless you have explicitly disabled the
warning:

=end original

B<警告>: この機能はまだ実験的で、実装は将来のバージョンの Perl で
変わるかもしれません。
このため、この機能を使うと、明示的に無効にしない限り警告が発生します:

    no warnings "experimental::declared_refs";

=begin original

This allows a reference to a variable to be declared with C<my>, C<state>,
our C<our>, or localized with C<local>.  It is intended mainly for use in
conjunction with the "refaliasing" feature.  See L<perlref/Declaring a
Reference to a Variable> for examples.

=end original

これは C<my>, C<state>, C<our>, C<local> でのローカル化において、
変数へのリファレンスを宣言できるようになります。
これは主に "refaliasing" 機能と併せて使うことを意図しています。
例については L<perlref/Declaring a Reference to a Variable> を
参照してください。

=begin original

This feature is available from Perl 5.26 onwards.

=end original

この機能は Perl 5.26 から利用可能です。

=head1 FEATURE BUNDLES

(機能の束)

=begin original

It's possible to load multiple features together, using
a I<feature bundle>.  The name of a feature bundle is prefixed with
a colon, to distinguish it from an actual feature.

=end original

複数の機能のまとめて読み込むためには、I<機能の束> (feature bundle) が
使えます。
機能の束の名前には、実際の機能と区別するためにコロンが前置されます。

  use feature ":5.10";

=begin original

The following feature bundles are available:

=end original

以下の機能の束が利用可能です:

  bundle    features included
  --------- -----------------
  :default  array_base

  :5.10     say state switch array_base

  :5.12     say state switch unicode_strings array_base

  :5.14     say state switch unicode_strings array_base

  :5.16     say state switch unicode_strings
            unicode_eval evalbytes current_sub fc

  :5.18     say state switch unicode_strings
            unicode_eval evalbytes current_sub fc

  :5.20     say state switch unicode_strings
            unicode_eval evalbytes current_sub fc

  :5.22     say state switch unicode_strings
            unicode_eval evalbytes current_sub fc

  :5.24     say state switch unicode_strings
            unicode_eval evalbytes current_sub fc
            postderef_qq

  :5.26     say state switch unicode_strings
            unicode_eval evalbytes current_sub fc
            postderef_qq

=begin original

The C<:default> bundle represents the feature set that is enabled before
any C<use feature> or C<no feature> declaration.

=end original

C<:default> 束は、C<use feature> や C<no feature> 宣言が有効になる前の
機能集合を表現しています。

=begin original

Specifying sub-versions such as the C<0> in C<5.14.0> in feature bundles has
no effect.  Feature bundles are guaranteed to be the same for all sub-versions.

=end original

機能の束での  C<5.14.0> の C<0> のような副バージョンを指定しても効果は
ありません。
機能の束は全ての副バージョンに関して同じ事が保証されています。

  use feature ":5.14.0";    # same as ":5.14"
  use feature ":5.14.1";    # same as ":5.14"

=head1 IMPLICIT LOADING

(暗黙の読み込み)

=begin original

Instead of loading feature bundles by name, it is easier to let Perl do
implicit loading of a feature bundle for you.

=end original

機能の束を名前で読み込むより、Perl に機能の束を暗黙に読み込ませるように
した方が簡単です。

=begin original

There are two ways to load the C<feature> pragma implicitly:

=end original

C<feature> プラグマを暗黙に読み込むには二つの方法があります:

=over 4

=item *

=begin original

By using the C<-E> switch on the Perl command-line instead of C<-e>.
That will enable the feature bundle for that version of Perl in the
main compilation unit (that is, the one-liner that follows C<-E>).

=end original

Perl のコマンドラインで C<-e> オプションの代わりに C<-E> オプションを
使用した場合。
これにより、main コンパイル単位(つまり、C<-E> に引き続く 1 行野郎)で
そのバージョンの Perl の機能の束が有効になります。

=item *

=begin original

By explicitly requiring a minimum Perl version number for your program, with
the C<use VERSION> construct.  That is,

=end original

C<use VERSION> 構文を使ってプログラムが必要とする最低限の Perl バージョン
番号を明示的に指定した場合。
つまり、以下のようにすると:

    use v5.10.0;

=begin original

will do an implicit

=end original

暗黙のうちに以下のように:

    no feature ':all';
    use feature ':5.10';

=begin original

and so on.  Note how the trailing sub-version
is automatically stripped from the
version.

=end original

なるということです。
末尾の副バージョンは自動的にバージョンから取り除かれるようになったことに
注意してください。

=begin original

But to avoid portability warnings (see L<perlfunc/use>), you may prefer:

=end original

しかし移植性の警告(L<perlfunc/use> を参照してください)を避けるために、
以下のようにするのを好むかもしれません:

    use 5.010;

=begin original

with the same effect.

=end original

これでも同じ効果が得られます。

=begin original

If the required version is older than Perl 5.10, the ":default" feature
bundle is automatically loaded instead.

=end original

要求したバージョンが Perl 5.10 より前の場合、代わりに機能の束 ":default" が
自動的に読み込まれます。

=back

=cut

=begin meta

Translate: SHIRAKATA Kentaro <argrath@ub32.org>
Status: completed

=end meta

